(function () {'use strict'; const LOG_BUFFER_SIZE = 50; let isRunning = false, interval, isDarkMode = false; let isDragging = false, dragOffset = {x: 0, y: 0}; let isCommandDragging = false, draggedCommand = null; let clickLimit = 5, clickCount = 0; let enableDelete = false; let commands = []; let isPanelMinimized = false; let chatLayoutObserver = null; const PANEL_SIZES = [ {width: 360, logMax: 140, commandMax: 200}, {width: 420, logMax: 180, commandMax: 240}, {width: 540, logMax: 240, commandMax: 320} ]; let panelSizeIndex = 1; const COMMAND_HOTKEY_STORAGE_KEY = 'trae-command-input-hotkey'; let commandInputHotkey = null; let isBindingCommandHotkey = false; const THEMES = {light: {'--bg-primary': '#ffffff', '--bg-secondary': '#f8f9fa', '--bg-tertiary': '#f5f5f5', '--text-primary': '#333333', '--text-secondary': '#666666', '--text-tertiary': '#8c8c8c', '--border-color': '#e0e0e0', '--border-light': '#ddd', '--shadow': '0 4px 6px rgba(0,0,0,0.1)', '--success': '#27ae60', '--warning': '#e74c3c', '--info': '#4096ff', '--panel-bg': '#ffffff', '--panel-border': '1px solid #e0e0e0', '--input-bg': '#fafafa', '--input-border': '#e0e0e0', '--button-bg': 'transparent', '--button-border': '1px solid #ddd', '--log-bg': '#fafafa', '--log-border': '#e0e0e0', '--command-bg': '#f5f7fa', '--command-border': '#e0e0e0'}, dark: {'--bg-primary': '#2c3e50', '--bg-secondary': '#34495e', '--bg-tertiary': '#1a252f', '--text-primary': '#ffffff', '--text-secondary': '#bbbbbb', '--text-tertiary': '#999999', '--border-color': '#4a5f7a', '--border-light': '#666666', '--shadow': '0 4px 6px rgba(0,0,0,0.3)', '--success': '#27ae60', '--warning': '#e74c3c', '--info': '#4096ff', '--panel-bg': '#2c3e50', '--panel-border': 'none', '--input-bg': '#34495e', '--input-border': '#4a5f7a', '--button-bg': 'transparent', '--button-border': '1px solid #666', '--log-bg': '#2c3e50', '--log-border': '#4a5f7a', '--command-bg': '#34495e', '--command-border': '#4a5f7a'}}; function applyTheme() {const theme = THEMES[isDarkMode ? 'dark' : 'light']; const panel = document.getElementById('trae-panel'); if (!panel) return; panel.style.background = theme['--panel-bg']; panel.style.color = theme['--text-primary']; panel.style.border = typeof theme['--panel-border'] === 'string' ? theme['--panel-border'] : ''; const statusIcon = document.getElementById('trae-status-icon'); const statusIconMinimized = document.getElementById('trae-status-icon-minimized'); const statusColor = isRunning ? theme['--success'] : theme['--text-tertiary']; if (statusIcon) statusIcon.style.background = statusColor; if (statusIconMinimized) statusIconMinimized.style.background = statusColor; const toggleBtn = document.getElementById('trae-toggle'); if (toggleBtn) {const buttonColor = isRunning ? theme['--text-tertiary'] : theme['--success']; toggleBtn.style.cssText = `background:${theme['--button-bg']};border:1px solid ${buttonColor};color:${buttonColor};padding:8px 12px;margin:2px;border-radius:4px;cursor:pointer;font-weight:bold`; toggleBtn.textContent = isRunning ? 'ÂÅúÊ≠¢' : 'ÂêØÂä®'} const commandInput = document.getElementById('trae-command-input'); if (commandInput) {commandInput.onfocus = function () {this.style.borderColor = theme['--info']; this.style.background = theme['--input-bg']}; commandInput.onblur = function () {this.style.borderColor = theme['--input-border']; this.style.background = theme['--input-bg']}; commandInput.style.borderColor = theme['--input-border']; commandInput.style.background = theme['--input-bg']} const deleteCheckbox = document.getElementById('trae-enable-delete'); if (deleteCheckbox) {deleteCheckbox.style.accentColor = theme['--info']} const clickLimitInput = document.getElementById('trae-click-limit'); if (clickLimitInput) {clickLimitInput.style.cssText = `width:35px;padding:2px 4px;border-radius:2px;font-size:11px;border:1px solid ${theme['--input-border']};outline:none;text-align:center;background:${theme['--input-bg']};color:${theme['--text-primary']};`} const commandItems = document.querySelectorAll('.trae-command-item'); commandItems.forEach(item => {item.style.background = theme['--command-bg']; item.style.border = `1px solid ${theme['--command-border']}`}); const commandTexts = document.querySelectorAll('.trae-command-text, .trae-command-status'); commandTexts.forEach(text => {text.style.color = theme['--text-primary']}); const logItems = document.querySelectorAll('.trae-log-item'); logItems.forEach(item => {if (item.classList.contains('success')) {item.style.color = theme['--success']} else if (item.classList.contains('warning')) {item.style.color = theme['--warning']} else {item.style.color = theme['--text-tertiary']}}); const headerButtons = document.querySelectorAll('.trae-header-button'); headerButtons.forEach(btn => {btn.style.background = 'transparent'; btn.style.border = `1px solid ${theme['--border-color']}`; btn.style.color = theme['--text-primary']; btn.onmouseenter = function() {if (!this.disabled) {this.style.background = theme['--bg-tertiary']; this.style.color = theme['--info']}}; btn.onmouseleave = function() {this.style.background = 'transparent'; this.style.color = theme['--text-primary']}}); const minimizeBtnMinimized = document.getElementById('trae-minimize-minimized'); if (minimizeBtnMinimized) {minimizeBtnMinimized.style.background = 'transparent'; minimizeBtnMinimized.style.border = `1px solid ${theme['--border-color']}`; minimizeBtnMinimized.style.color = theme['--text-primary']; minimizeBtnMinimized.onmouseenter = function() {this.style.background = theme['--bg-tertiary']; this.style.color = theme['--info']}; minimizeBtnMinimized.onmouseleave = function() {this.style.background = 'transparent'; this.style.color = theme['--text-primary']}} if (commandInput) {commandInput.removeEventListener('focus', commandInput._focusHandler); commandInput.removeEventListener('blur', commandInput._blurHandler); commandInput._focusHandler = function () {this.style.borderColor = theme['--info']; this.style.background = theme['--input-bg']}; commandInput._blurHandler = function () {this.style.borderColor = theme['--input-border']; this.style.background = theme['--input-bg']}; commandInput.addEventListener('focus', commandInput._focusHandler); commandInput.addEventListener('blur', commandInput._blurHandler)}} function toggleTheme() {isDarkMode = !isDarkMode; applyTheme(); log(`üé® ÂàáÊç¢Âà∞${isDarkMode ? 'Ê∑±Ëâ≤' : 'ÊµÖËâ≤'}Ê®°Âºè`)} function log(msg) {const logList = document.getElementById('trae-log-list'); const logCount = document.getElementById('trae-log-count'); const logArrow = document.getElementById('trae-log-arrow'); if (!logList) return; let logType = 'info'; let logIcon = '‚ÑπÔ∏è'; let cleanMsg = msg; if (msg.includes('‚úÖ')) {logType = 'success'; logIcon = '‚úÖ'; cleanMsg = msg.replace('‚úÖ', '').trim()} else if (msg.includes('‚ùå')) {logType = 'warning'; logIcon = '‚ùå'; cleanMsg = msg.replace('‚ùå', '').trim()} else if (msg.includes('‚ö†Ô∏è')) {logType = 'warning'; logIcon = '‚ö†Ô∏è'; cleanMsg = msg.replace('‚ö†Ô∏è', '').trim()} else if (msg.includes('üéØ') || msg.includes('üìù') || msg.includes('‚ú®')) {logType = 'info'; logIcon = '‚ÑπÔ∏è'; cleanMsg = msg.replace(/[üéØüìù‚ú®]/g, '').trim()} const entry = document.createElement('div'); entry.className = `trae-log-item ${logType}`; entry.innerHTML = ` <span class="trae-log-time">${new Date().toLocaleTimeString()}</span><span class="trae-log-text">${logIcon} ${cleanMsg}</span> `; logList.appendChild(entry); if (logList.children.length > LOG_BUFFER_SIZE) {for (let i = 0; i < Math.floor(LOG_BUFFER_SIZE / 2); i++) {logList.removeChild(logList.children[i])}} if (logCount) {logCount.textContent = `${logList.children.length} Êù°`} logList.scrollTop = logList.scrollHeight; console.log(`[TraeCN] ${msg}`)} function findAncestorContaining(startNode, targetNode) {if (!startNode || !targetNode) {return null} let current = startNode; while (current && current !== document.body && current !== document.documentElement) {if (current.contains(targetNode)) {return current} current = current.parentElement} return null} function ensureChatInputLayout() {try {const editable = document.querySelector('.chat-input-v2-input-box-editable'); const sendButton = document.querySelector('.chat-input-v2-send-button'); if (!editable || !sendButton) {return false} const inputContainer = editable.closest('.chat-input-v2-input-box') || editable.parentElement; if (!inputContainer) {return false} const layoutContainer = findAncestorContaining(inputContainer, sendButton); if (!layoutContainer) {return false} if (layoutContainer.dataset.traeChatLayout === 'fixed' || !layoutContainer.dataset.traeLayoutCleaned) {delete layoutContainer.dataset.traeChatLayout; layoutContainer.style.removeProperty('display'); layoutContainer.style.removeProperty('grid-template-columns'); layoutContainer.style.removeProperty('column-gap'); layoutContainer.style.removeProperty('align-items'); layoutContainer.style.removeProperty('width'); layoutContainer.dataset.traeLayoutCleaned = '1'} inputContainer.style.minWidth = '0'; if (inputContainer.style.width !== '100%') {inputContainer.style.width = '100%'} const editableWrapper = editable.parentElement; if (editableWrapper && editableWrapper !== inputContainer) {editableWrapper.style.minWidth = '0'; if (editableWrapper.style.width !== '100%') {editableWrapper.style.width = '100%'}} sendButton.style.alignSelf = 'stretch'; sendButton.style.display = 'flex'; sendButton.style.alignItems = 'center'; sendButton.style.justifyContent = 'center'; sendButton.style.whiteSpace = 'nowrap'; return true} catch (error) {console.warn('Ë∞ÉÊï¥ chat-input Â∏ÉÂ±ÄÂ§±Ë¥•:', error); return false}} function startChatLayoutObserver() {if (chatLayoutObserver) {return} const tryApplyLayout = () => ensureChatInputLayout(); tryApplyLayout(); if (!document.body) {setTimeout(startChatLayoutObserver, 50); return} chatLayoutObserver = new MutationObserver(() => {tryApplyLayout()}); chatLayoutObserver.observe(document.body, {childList: true, subtree: true})} function loadCommandHotkey() {try {if (typeof window === 'undefined' || !window.localStorage) {return} const stored = window.localStorage.getItem(COMMAND_HOTKEY_STORAGE_KEY); if (!stored) return; const parsed = JSON.parse(stored); if (parsed && typeof parsed === 'object' && parsed.key) {commandInputHotkey = {key: parsed.key, ctrlKey: !!parsed.ctrlKey, metaKey: !!parsed.metaKey, altKey: !!parsed.altKey, shiftKey: !!parsed.shiftKey}}} catch (error) {console.warn('Âä†ËΩΩÂø´Êç∑ÈîÆÂ§±Ë¥•', error); commandInputHotkey = null}} function saveCommandHotkey(hotkey) {if (!hotkey) return; try {if (typeof window === 'undefined' || !window.localStorage) {return} window.localStorage.setItem(COMMAND_HOTKEY_STORAGE_KEY, JSON.stringify(hotkey))} catch (error) {console.warn('‰øùÂ≠òÂø´Êç∑ÈîÆÂ§±Ë¥•', error)}} function clearCommandHotkeySetting() {commandInputHotkey = null; if (typeof window !== 'undefined' && window.localStorage) {try {window.localStorage.removeItem(COMMAND_HOTKEY_STORAGE_KEY)} catch (error) {console.warn('Ê∏ÖÈô§Âø´Êç∑ÈîÆÂ§±Ë¥•', error)}} updateCommandHotkeyUI(); log('üßπ Â∑≤Ê∏ÖÈô§ÂëΩ‰ª§ËæìÂÖ•Âø´Êç∑ÈîÆ')} function normalizeHotkeyKey(event) {if (!event) return null; const skipKeys = ['Shift', 'Control', 'Alt', 'Meta']; if (skipKeys.includes(event.key)) return null; if (event.key === 'Dead' || event.key === 'Unidentified') return null; const code = event.code || ''; const key = event.key || ''; if (/^Key[A-Z]$/.test(code)) {return code.slice(3)} if (/^Digit[0-9]$/.test(code)) {return code.slice(5)} if (/^Numpad[0-9]$/.test(code)) {return 'Num' + code.slice(6)} if (code === 'Space' || key === ' ') {return 'Space'} if (key === 'Escape') {return 'Esc'} if (key === 'Tab') {return 'Tab'} if (key === 'Enter') {return 'Enter'} if (key === 'Backspace') {return 'Backspace'} if (key === 'Delete') {return 'Delete'} if (key.startsWith('Arrow')) {return key} if (/^F[1-9][0-2]?$/.test(key)) {return key.toUpperCase()} if (key.length === 1) {return key.toUpperCase()} return key.charAt(0).toUpperCase() + key.slice(1)} function buildHotkeyFromEvent(event) {const key = normalizeHotkeyKey(event); if (!key) {return null} const hasFunctionalKey = /^F[1-9][0-2]?$/.test(key) || ['Enter', 'Tab', 'Backspace', 'Delete', 'Space', 'Esc'].includes(key) || key.startsWith('Arrow'); const hasRequiredModifier = event.ctrlKey || event.metaKey || event.altKey; if (!hasFunctionalKey && !hasRequiredModifier) {return null} return {key, ctrlKey: !!event.ctrlKey, metaKey: !!event.metaKey, altKey: !!event.altKey, shiftKey: !!event.shiftKey}} function hotkeyToDisplay(hotkey) {if (!hotkey) return ''; const parts = []; if (hotkey.ctrlKey) parts.push('Ctrl'); if (hotkey.metaKey) parts.push('Cmd'); if (hotkey.altKey) parts.push('Alt'); if (hotkey.shiftKey) parts.push('Shift'); parts.push(hotkey.key); return parts.join('+')} function hotkeyMatches(event, hotkey) {if (!hotkey) return false; const key = normalizeHotkeyKey(event); if (!key) return false; return key === hotkey.key && !!event.ctrlKey === !!hotkey.ctrlKey && !!event.metaKey === !!hotkey.metaKey && !!event.altKey === !!hotkey.altKey && !!event.shiftKey === !!hotkey.shiftKey} function updateCommandHotkeyUI() {const hotkeyButton = document.getElementById('trae-command-hotkey-button'); if (!hotkeyButton) return; if (isBindingCommandHotkey) {hotkeyButton.textContent = '‚åõ Á≠âÂæÖÊåâÈîÆÔºåEsc Ê∏ÖÈô§'; hotkeyButton.dataset.state = 'binding'; hotkeyButton.title = 'Êåâ‰∏ãÁªÑÂêàÈîÆËÆæÁΩÆÂø´Êç∑ÈîÆÔºåEsc Ê∏ÖÈô§ÂΩìÂâçÂø´Êç∑ÈîÆ'} else if (commandInputHotkey) {hotkeyButton.textContent = hotkeyToDisplay(commandInputHotkey); hotkeyButton.dataset.state = 'set'; hotkeyButton.title = 'ÁÇπÂáªÈáçÊñ∞ËÆæÁΩÆÂø´Êç∑ÈîÆ'} else {hotkeyButton.textContent = 'ÁÇπÂáªËÆæÁΩÆ'; hotkeyButton.dataset.state = 'empty'; hotkeyButton.title = 'ÁÇπÂáªËÆæÁΩÆÂëΩ‰ª§ËæìÂÖ•Âø´Êç∑ÈîÆ'}} function beginCommandHotkeyBinding() {if (isBindingCommandHotkey) return; isBindingCommandHotkey = true; updateCommandHotkeyUI(); log('‚å®Ô∏è Ê≠£Âú®ÁõëÂê¨Êñ∞ÁöÑÂø´Êç∑ÈîÆÔºåÊåâ Esc Ê∏ÖÈô§')} function cancelCommandHotkeyBinding(showLog = true) {if (!isBindingCommandHotkey) return; isBindingCommandHotkey = false; updateCommandHotkeyUI(); if (showLog) {log('‚ÑπÔ∏è Â∑≤ÂèñÊ∂àÂø´Êç∑ÈîÆÁªëÂÆö')}} function finishCommandHotkeyBinding(event) {if (!isBindingCommandHotkey) return; if (event.key === 'Escape' && !event.ctrlKey && !event.metaKey && !event.altKey && !event.shiftKey) {const hadHotkey = !!commandInputHotkey; isBindingCommandHotkey = false; if (hadHotkey) {clearCommandHotkeySetting()} else {updateCommandHotkeyUI(); log('‚ÑπÔ∏è Â∑≤ÂèñÊ∂àÂø´Êç∑ÈîÆÁªëÂÆö')} return} const hotkey = buildHotkeyFromEvent(event); if (!hotkey) {log('‚ö†Ô∏è ËØ∑Ëá≥Â∞ëÂåÖÂê´ÂäüËÉΩÈîÆÊàñÈÖçÂêà Ctrl/Cmd/Alt ‰ΩøÁî®'); return} commandInputHotkey = hotkey; saveCommandHotkey(hotkey); isBindingCommandHotkey = false; updateCommandHotkeyUI(); log(`‚å®Ô∏è Âø´Êç∑ÈîÆÂ∑≤Êõ¥Êñ∞‰∏∫ ${hotkeyToDisplay(hotkey)}`)} function focusCommandInputFallback() {const controls = document.getElementById('trae-controls'); if (controls && isPanelMinimized) {minimize()} const commandContent = document.getElementById('trae-command-content'); const commandArrow = document.getElementById('trae-command-arrow'); if (commandContent && commandContent.style.display === 'none') {commandContent.style.display = 'block'; if (commandArrow) {commandArrow.textContent = '‚ñº'}} const commandInput = document.getElementById('trae-command-input'); if (commandInput) {commandInput.focus(); const end = commandInput.value.length; commandInput.setSelectionRange(end, end)}} function handleGlobalHotkey(event) {if (event.repeat) {return} if (isBindingCommandHotkey) {event.preventDefault(); event.stopPropagation(); finishCommandHotkeyBinding(event); return} if (!commandInputHotkey) {return} if (!hotkeyMatches(event, commandInputHotkey)) {return} event.preventDefault(); event.stopPropagation(); const commandInput = document.getElementById('trae-command-input'); const activeElement = document.activeElement; const isInputFocused = commandInput && (activeElement === commandInput || (activeElement && typeof activeElement.closest === 'function' && activeElement.closest('#trae-command-input-area'))); if (isPanelMinimized) {minimize(); setTimeout(() => {if (typeof window.focusCommandInputArea === 'function') {window.focusCommandInputArea()} else {focusCommandInputFallback()}}, 300); return} if (isInputFocused) {minimize(); return} if (typeof window.focusCommandInputArea === 'function') {window.focusCommandInputArea()} else {focusCommandInputFallback()}} function addCommand() {const input = document.getElementById('trae-command-input'); const command = input.value.trim(); if (!command) {log('‚ùå ÂëΩ‰ª§‰∏çËÉΩ‰∏∫Á©∫'); return} const existingCommand = commands.find(cmd => cmd.text === command && cmd.status === 'pending'); if (existingCommand) {log('‚ö†Ô∏è ÂëΩ‰ª§Â∑≤Â≠òÂú®ÔºåÊó†ÈúÄÈáçÂ§çÊ∑ªÂä†'); return} commands.push({id: Date.now(), text: command, status: 'pending'}); input.value = ''; updateCommandList(); log(`‚úÖ Â∑≤ÂèëÈÄÅÂëΩ‰ª§: ${command}`)} function removeCommand(id) {const index = commands.findIndex(cmd => cmd.id === id); if (index !== -1) {const command = commands[index]; commands.splice(index, 1); updateCommandList(); log(`üóëÔ∏è Â∑≤Âà†Èô§ÂëΩ‰ª§: ${command.text}`)}} function updateCommandList() {const listContainer = document.getElementById('trae-command-items'); const countContainer = document.getElementById('trae-command-count'); if (!listContainer || !countContainer) return; listContainer.innerHTML = ''; const pendingCount = commands.filter(cmd => cmd.status === 'pending').length; countContainer.textContent = `${commands.length} ‰∏™ÂëΩ‰ª§`; commands.forEach((command) => {const commandItem = document.createElement('div'); const isPending = command.status === 'pending'; commandItem.className = `trae-command-item ${command.status === 'completed' ? 'completed' : ''}`; commandItem.dataset.commandId = command.id; const statusIcon = command.status === 'completed' ? '‚úÖ' : command.status === 'executing' ? '‚è≥' : '‚Üí'; commandItem.innerHTML = ` <span class="trae-command-drag-handle" style="display: ${isPending ? 'flex' : 'none'};" data-command-id="${command.id}" title="ÊãñÊãΩÊéíÂ∫è" draggable="${isPending}">‚ãÆ‚ãÆ</span><span class="trae-command-status">${statusIcon}</span><span class="trae-command-text"></span><span class="trae-command-delete" onclick="removeCommand(${command.id})" title="Âà†Èô§">√ó</span> `; const commandTextEl = commandItem.querySelector('.trae-command-text'); if (commandTextEl) {commandTextEl.textContent = command.text; commandTextEl.setAttribute('title', command.text)} if (isPending) {const dragHandle = commandItem.querySelector('.trae-command-drag-handle'); if (dragHandle) {dragHandle.addEventListener('dragstart', (e) => handleCommandDragStart(e, command.id)); dragHandle.addEventListener('dragend', handleCommandDragEnd)} commandItem.addEventListener('dragover', handleCommandDragOver); commandItem.addEventListener('dragleave', handleCommandDragLeave); commandItem.addEventListener('drop', (e) => handleCommandDrop(e, command.id))} listContainer.appendChild(commandItem)}); updateMinimizedTitle(); applyTheme()} function checkChatInputStatus() {try {const chatInput = document.querySelector('.chat-input-v2-input-box-editable'); const sendButton = document.querySelector('.chat-input-v2-send-button'); if (!chatInput || !sendButton) {log('‚ùå Êú™ÊâæÂà∞chat-inputÁªÑ‰ª∂'); return 'not_found'} const isRunning = sendButton.querySelector('.codicon-stop-circle'); const isDisabled = sendButton.disabled; const hasArrowUp = sendButton.querySelector('.codicon-icube-ArrowUp'); let status = ''; let details = []; if (isRunning) {status = 'running'; details.push('ËøêË°å‰∏≠')} else if (isDisabled) {status = 'ready'; details.push('Á≠âÂæÖËæìÂÖ•')} else if (hasArrowUp) {status = 'ready'; details.push('ÂáÜÂ§áÂèëÈÄÅ')} else {status = 'waiting'; details.push('Á≠âÂæÖÁä∂ÊÄÅ')} const hasContent = chatInput.textContent.trim().length > 0; if (hasContent) {details.push('ÊúâÂÜÖÂÆπ')} const optimizeBtn = document.querySelector('.chat-input-v2-prompt-optimize-button'); if (optimizeBtn && !optimizeBtn.disabled) {details.push('‰ºòÂåñÂèØÁî®')} log(`üìä Chat-InputÁä∂ÊÄÅ: ${status} (${details.join(', ')})`); return status} catch (error) {log(`‚ùå Ê£ÄÊµãÁä∂ÊÄÅÂ§±Ë¥•: ${error.message}`); return 'error'}} function inputCommandToChat(command) {try {const chatInput = document.querySelector('.chat-input-v2-input-box-editable'); if (!chatInput) {log('‚ùå Êú™ÊâæÂà∞chat-inputËæìÂÖ•Ê°Ü'); return false} const sendButton = document.querySelector('.chat-input-v2-send-button'); if (!sendButton) {log('‚ùå Êú™ÊâæÂà∞ÂèëÈÄÅÊåâÈíÆ'); return false} const isRunning = sendButton.querySelector('.codicon-stop-circle'); if (isRunning) {log('‚ö†Ô∏è TraeÊ≠£Âú®ËøêË°åÔºåÁ≠âÂæÖËæìÂÖ•Áä∂ÊÄÅ'); return false} log(`üìù Ê≠£Âú®ËæìÂÖ•ÂëΩ‰ª§: ${command}`); chatInput.focus(); chatInput.innerHTML = ''; const paragraph = document.createElement('p'); paragraph.className = 'chat-input-v2__paragraph'; paragraph.setAttribute('dir', 'ltr'); const lines = command.split('\n'); lines.forEach((line, index) => {if (index > 0) {const br = document.createElement('br'); paragraph.appendChild(br)} const textNode = document.createTextNode(line); paragraph.appendChild(textNode)}); chatInput.appendChild(paragraph); chatInput.setAttribute('data-text-content', command); paragraph.setAttribute('data-text-content', command); const events = ['focus', 'input', 'change', 'keyup', 'keydown', 'DOMSubtreeModified', 'compositionend']; events.forEach(eventType => {try {const event = new Event(eventType, {bubbles: true, cancelable: true, view: window}); chatInput.dispatchEvent(event)} catch (e) {}}); try {const inputEvent = new InputEvent('input', {bubbles: true, cancelable: true, data: command, inputType: 'insertText'}); chatInput.dispatchEvent(inputEvent)} catch (e) {log(`InputEventËß¶ÂèëÂ§±Ë¥•: ${e.message}`)} try {const lexicalEvent = new Event('lexical-update', {bubbles: true, cancelable: true}); chatInput.dispatchEvent(lexicalEvent)} catch (e) {} log('‚úÖ ÂëΩ‰ª§Â∑≤ÊèíÂÖ•ÔºåÁ≠âÂæÖÁïåÈù¢ÂìçÂ∫î...'); setTimeout(() => {scheduleOptimizeAndSend(command)}, 1000); return true} catch (error) {log(`‚ùå ËæìÂÖ•ÂëΩ‰ª§Â§±Ë¥•: ${error.message}`); return false}} function scheduleOptimizeAndSend(command) {try {const sendButton = document.querySelector('.chat-input-v2-send-button'); if (!sendButton) {log('‚ùå Êú™ÊâæÂà∞ÂèëÈÄÅÊåâÈíÆ'); return} log('üîÑ ÂáÜÂ§áÊ£ÄÊü•‰ºòÂåñÊµÅÁ®ã'); attemptPromptOptimization(command, 0)} catch (error) {log(`‚ùå ÂáÜÂ§á‰ºòÂåñÊµÅÁ®ãÂ§±Ë¥•: ${error.message}`)}} function attemptPromptOptimization(command, attempt) {try {const optimizeBtn = document.querySelector('.chat-input-v2-prompt-optimize-button'); if (isButtonInteractive(optimizeBtn)) {log('‚ú® Ê£ÄÊµãÂà∞ÊèêÁ§∫‰ºòÂåñÊåâÈíÆÔºåÂáÜÂ§áÁÇπÂáª'); try {optimizeBtn.click(); log('‚ú® Â∑≤Ëß¶ÂèëÊèêÁ§∫‰ºòÂåñ'); waitForOptimizationComplete(command, 0)} catch (error) {log(`‚ùå ÁÇπÂáªÊèêÁ§∫‰ºòÂåñÂ§±Ë¥•: ${error.message}`); waitForSendReady(command, 0)} return} if (attempt >= 2) {log('‚ÑπÔ∏è ÊèêÁ§∫‰ºòÂåñ‰∏çÂèØÁî®ÔºåÁõ¥Êé•ÂáÜÂ§áÂèëÈÄÅ'); waitForSendReady(command, 0); return} setTimeout(() => {attemptPromptOptimization(command, attempt + 1)}, 300); return} catch (error) {log(`‚ùå Ê£ÄÊü•ÊèêÁ§∫‰ºòÂåñÂ§±Ë¥•: ${error.message}`); waitForSendReady(command, 0)}} function waitForOptimizationComplete(command, attempt) {try {const optimizeBtn = document.querySelector('.chat-input-v2-prompt-optimize-button'); if (!optimizeBtn) {if (attempt >= 30) {log('‚ö†Ô∏è Êó†Ê≥ïÂÆö‰Ωç‰ºòÂåñÊåâÈíÆÔºåÁõ¥Êé•ÂèëÈÄÅ'); waitForSendReady(command, 0); return} setTimeout(() => {waitForOptimizationComplete(command, attempt + 1)}, 500); return} if (hasOptimizeUndoIcon(optimizeBtn)) {log('‚úÖ ‰ºòÂåñÂÆåÊàêÔºåÂáÜÂ§áÂèëÈÄÅ'); setTimeout(() => waitForSendReady(command, 0), 200); return} if (attempt >= 30) {log('‚ö†Ô∏è Á≠âÂæÖ‰ºòÂåñÂÆåÊàêË∂ÖÊó∂ÔºåÁõ¥Êé•ÂèëÈÄÅ'); waitForSendReady(command, 0); return} setTimeout(() => {waitForOptimizationComplete(command, attempt + 1)}, 500)} catch (error) {log(`‚ùå Á≠âÂæÖ‰ºòÂåñÂÆåÊàêÂ§±Ë¥•: ${error.message}`); waitForSendReady(command, 0)}} function hasOptimizeUndoIcon(optimizeBtn) {try {if (!optimizeBtn) return false; const undoIcon = optimizeBtn.querySelector('span[class*="codicon-icube-undo" i]') || optimizeBtn.querySelector('span.codicon-icube-Undo'); return Boolean(undoIcon)} catch (error) {return false}} function waitForSendReady(command, attempt) {try {const sendButton = document.querySelector('.chat-input-v2-send-button'); if (!sendButton) {log('‚ùå Á≠âÂæÖËøáÁ®ã‰∏≠Êú™ÊâæÂà∞ÂèëÈÄÅÊåâÈíÆ'); return false} const isRunning = sendButton.querySelector('.codicon-stop-circle'); const isDisabled = sendButton.disabled || sendButton.getAttribute('data-state') === 'loading'; const hasContent = chatInputHasContent(); if (!hasContent) {log('‚ùå ËæìÂÖ•Ê°Ü‰∏∫Á©∫ÔºåÊó†Ê≥ïÂèëÈÄÅ'); return false} if (!isRunning && !isDisabled) {sendButton.click(); log('üì§ ÂëΩ‰ª§Â∑≤ÂèëÈÄÅ'); return true} if (attempt >= 20) {log('‚ö†Ô∏è Á≠âÂæÖÂèëÈÄÅÊåâÈíÆË∂ÖÊó∂'); return false} setTimeout(() => {waitForSendReady(command, attempt + 1)}, 300); return false} catch (error) {log(`‚ùå Á≠âÂæÖÂèëÈÄÅÊåâÈíÆÂ§±Ë¥•: ${error.message}`); return false}} function chatInputHasContent() {try {const chatInput = document.querySelector('.chat-input-v2-input-box-editable'); if (!chatInput) {return false} const paragraph = chatInput.querySelector('p.chat-input-v2__paragraph'); const textContent = paragraph ? paragraph.textContent.trim() : ''; return textContent.length > 0} catch (error) {return false}} function isButtonVisible(button) {try {const rect = button.getBoundingClientRect(); return rect.width > 0 && rect.height > 0 && window.getComputedStyle(button).display !== 'none' && window.getComputedStyle(button).visibility !== 'hidden'} catch (error) {return false}} function isButtonInteractive(button) {try {if (!button) {return false} if (button.disabled) {return false} const ariaDisabled = button.getAttribute('aria-disabled'); if (ariaDisabled === 'true') {return false} const dataState = button.getAttribute('data-state'); if (dataState === 'loading') {return false} return isButtonVisible(button)} catch (error) {return false}} const BUTTON_CONFIGS = [ {name: 'ÁªßÁª≠', selector: 'div.agent-error-wrap div.icube-alert-action', validate: (b) => b.textContent.trim() === 'ÁªßÁª≠'}, {name: 'ËøêË°å', selector: 'div.icd-run-command-card-v2-actions button.icd-run-command-card-v2-actions-btn-run', validate: (b) => b.textContent.trim() === 'ËøêË°å'}, {name: 'ÂÖ®ÈÉ®Êé•Âèó', selector: 'div.chat-todolist-bar button.icd-btn-primary', validate: (b) => {const span = b.querySelector('span.icd-btn-content'); return (span ? span.textContent.trim() : '') === 'ÂÖ®ÈÉ®Êé•Âèó'}}, {name: 'Âà†Èô§', selector: 'button.icd-delete-files-command-card-v2-actions-delete', validate: (b) => {const span = b.querySelector('span.icd-btn-content'); return (span ? span.textContent.trim() : '') === 'Âà†Èô§' && enableDelete}} ]; function findButton(config) {try {const button = document.querySelector(config.selector); return button && isButtonVisible(button) && config.validate(button) ? button : null} catch (error) {log(`‚ùå Êü•Êâæ${config.name}ÊåâÈíÆÈîôËØØ: ${error.message}`); return null}} function clickButton(button, buttonName) {try {const rect = button.getBoundingClientRect(); const event = new MouseEvent('click', {view: window, bubbles: true, cancelable: true, clientX: rect.left + rect.width / 2, clientY: rect.top + rect.height / 2}); button.dispatchEvent(event); clickCount++; updateMinimizedTitle(); const logMessage = buttonName === 'Âà†Èô§' ? `‚úÖ ÊàêÂäüÁÇπÂáª<span style="color: #e74c3c; font-weight: bold;">"${buttonName}"</span>ÊåâÈíÆ (${clickCount}/${clickLimit})` : `‚úÖ ÊàêÂäüÁÇπÂáª"${buttonName}"ÊåâÈíÆ (${clickCount}/${clickLimit})`; log(logMessage); showClickAnimation(); return checkClickLimitAfterClick()} catch (error) {log(`‚ùå ÁÇπÂáª${buttonName}ÊåâÈíÆÈîôËØØ: ${error.message}`); return false}} function findAndClick() {try {for (const config of BUTTON_CONFIGS) {const button = findButton(config); if (button) {return clickButton(button, config.name)}} const executingCommand = commands.find(cmd => cmd.status === 'executing'); if (executingCommand) {return false} const pendingCommands = commands.filter(cmd => cmd.status === 'pending'); if (pendingCommands.length > 0) {return processNextCommandInQueue()} return false} catch (error) {log(`‚ùå ÈîôËØØ: ${error.message}`); return false}} function setElStyle(id, style) {const el = document.getElementById(id); if (el) {if (style.includes(':')) {el.style.cssText = style} else {el.style.color = style}}} function checkClickLimitAfterClick() {if (clickLimit > 0 && clickCount >= clickLimit) {setTimeout(() => {clickCount = 0; updateMinimizedTitle(); stop(true)}, 300); return true} return false} function updateClickLimit(value) {const numValue = parseInt(value); if (isNaN(numValue) || numValue < 0) {clickLimit = 0} else if (numValue > 99) {clickLimit = 99} else {clickLimit = numValue} const limitInput = document.getElementById('trae-click-limit'); if (limitInput) limitInput.value = clickLimit; updateMinimizedTitle(); log(`üìä ÁÇπÂáªÊ¨°Êï∞ÈôêÂà∂Â∑≤ËÆæÁΩÆ‰∏∫: ${clickLimit === 0 ? 'Êó†ÈôêÂà∂' : clickLimit}`)} function resetClickCount() {clickCount = 0; updateMinimizedTitle(); log('üîÑ ÁÇπÂáªÊ¨°Êï∞Â∑≤ÈáçÁΩÆ')} function toggle() {isRunning ? stop() : start()} function start() {if (isRunning) return; isRunning = true; applyTheme(); log('üöÄ ÂêØÂä®Ëá™Âä®Êìç‰Ωú (ÊîØÊåÅÁªßÁª≠„ÄÅËøêË°å„ÄÅÊé•ÂèóÊåâÈíÆ' + (enableDelete ? '„ÄÅ<span style="color: #e74c3c; font-weight: bold;">Âà†Èô§ÊåâÈíÆ</span>' : '') + ')'); interval = setInterval(findAndClick, 5000); findAndClick(); setTimeout(() => {if (!isPanelMinimized) {minimize(); log('üì± Ëá™Âä®Êî∂Ëµ∑ÊéßÂà∂Èù¢Êùø')}}, 3000)} function stop(isLimitReached = false) {if (!isRunning) return; if (interval) clearInterval(interval); isRunning = false; applyTheme(); if (isLimitReached) {log('‚ö†Ô∏è Â∑≤ËææÂà∞ÁÇπÂáªÊ¨°Êï∞ÈôêÂà∂ÔºåËá™Âä®ÂÅúÊ≠¢Êìç‰Ωú')} else {log('‚èπÔ∏è ÂÅúÊ≠¢Ëá™Âä®Êìç‰Ωú')} if (isPanelMinimized) {minimize(); log('üì± Ëá™Âä®Â±ïÂºÄÊéßÂà∂Èù¢Êùø')}} function updateMinimizeButton(isMinimized) {const minimizeBtn = document.getElementById('trae-minimize'); const minimizeBtnMinimized = document.getElementById('trae-minimize-minimized'); if (minimizeBtn) {minimizeBtn.textContent = isMinimized ? '+' : 'Ôºç'; minimizeBtn.title = isMinimized ? 'Â±ïÂºÄ' : 'Êî∂Ëµ∑'} if (minimizeBtnMinimized) {minimizeBtnMinimized.textContent = isMinimized ? '+' : 'Ôºç'; minimizeBtnMinimized.title = isMinimized ? 'Â±ïÂºÄ' : 'Êî∂Ëµ∑'}} function processNextCommandInQueue() {try {const pendingCommands = commands.filter(cmd => cmd.status === 'pending'); if (pendingCommands.length === 0) {return false} const nextCommand = pendingCommands[0]; const commandIndex = commands.findIndex(cmd => cmd.id === nextCommand.id); const sendButton = document.querySelector('.chat-input-v2-send-button'); if (!sendButton) {log('‚ùå Êú™ÊâæÂà∞ÂèëÈÄÅÊåâÈíÆ'); return false} const isRunning = sendButton.querySelector('.codicon-stop-circle'); if (isRunning) {log('‚ö†Ô∏è TraeÊ≠£Âú®ËøêË°åÔºåË∑≥ËøáÂëΩ‰ª§ÊâßË°å'); return false} commands[commandIndex].status = 'executing'; updateCommandList(); const success = inputCommandToChat(nextCommand.text); if (success) {commands[commandIndex].status = 'completed'; clickCount++; updateMinimizedTitle(); log(`‚úÖ ÂëΩ‰ª§ÊâßË°åÂÆåÊàê: ${nextCommand.text} (${clickCount}/${clickLimit === 0 ? '‚àû' : clickLimit})`); if (clickLimit > 0 && clickCount >= clickLimit) {stop(true)}} else {commands[commandIndex].status = 'pending'; log(`‚ùå ÂëΩ‰ª§ÊâßË°åÂ§±Ë¥•: ${nextCommand.text}`)} updateCommandList(); return success} catch (error) {log(`‚ùå Â§ÑÁêÜÂëΩ‰ª§ÈòüÂàóÂ§±Ë¥•: ${error.message}`); return false}} function updateMinimizedTitle() {const title = document.getElementById('trae-title'); const minimizedTitle = document.getElementById('trae-minimized-title'); const queueStatus = document.getElementById('trae-queue-status'); const clickLimitDisplay = clickLimit === 0 ? '‚àû' : clickLimit; const pendingCommands = commands.filter(cmd => cmd.status === 'pending').length; const completedCommands = commands.filter(cmd => cmd.status === 'completed').length; const totalCommands = commands.length; let commandInfo = ''; if (totalCommands > 0) {commandInfo = ` (${completedCommands}/${totalCommands})`} const titleContent = `Auto <span class="trae-count-wrapper">${clickCount}</span>/${clickLimitDisplay}${commandInfo} <span class="trae-plus-placeholder"></span>`; if (title) title.innerHTML = titleContent; if (minimizedTitle) minimizedTitle.innerHTML = titleContent; if (queueStatus) {if (totalCommands > 0) {queueStatus.style.display = 'block'; let queueText = `ÈòüÂàóÔºö`; if (pendingCommands > 0) {queueText += `${pendingCommands} ‰∏™ÂæÖÊâßË°å`} else if (completedCommands > 0) {queueText += `${completedCommands} ‰∏™Â∑≤Êèê‰∫§`} queueStatus.textContent = queueText} else {queueStatus.style.display = 'none'}}} function showClickAnimation(isSimulated = false) {if (isSimulated) {clickCount++; updateMinimizedTitle(); log(`‚úÖ Ê®°ÊãüÁÇπÂáªÊàêÂäü (${clickCount}/${clickLimit})`); if (checkClickLimitAfterClick()) {log('‚ö†Ô∏è Ê®°ÊãüÁÇπÂáªËææÂà∞ÈôêÂà∂ÔºåËá™Âä®ÂÅúÊ≠¢Êìç‰Ωú')}} const minimizedTitle = document.getElementById('trae-minimized-title'); const title = document.getElementById('trae-title'); if (!minimizedTitle && !title) return; const activeTitle = minimizedTitle?.style.display !== 'none' ? minimizedTitle : title; if (!activeTitle) return; let countWrapper = activeTitle.querySelector('.trae-count-wrapper'); if (!countWrapper) {const text = activeTitle.textContent; const match = text.match(/Auto\s+(\d+)\/(.+?)(?:\s|$)/); if (match) {activeTitle.innerHTML = `Auto <span class="trae-count-wrapper">${match[1]}</span>/${match[2]} <span class="trae-plus-placeholder"></span>`; countWrapper = activeTitle.querySelector('.trae-count-wrapper')} else {return}} if (!countWrapper) return; if (!document.getElementById('trae-animation-styles')) {const style = document.createElement('style'); style.id = 'trae-animation-styles'; style.textContent = ` @keyframes fadeUp {0% {opacity: 0; transform: translateY(0)} 30% {opacity: 1; transform: translateY(-5px)} 100% {opacity: 0; transform: translateY(-30px)}} .trae-count-wrapper {position: relative; display: inline-block} `; document.head.appendChild(style)} const plusOne = document.createElement('span'); plusOne.textContent = '+1'; plusOne.style.cssText = ` position: absolute; left: -2px; top: 10px; color: ${isDarkMode ? '#2ecc71' : '#27ae60'}; background: ${isDarkMode ? 'rgba(44, 62, 80, 0.6)' : 'rgba(255, 255, 255, 0.6)'}; padding: 2px 4px; border-radius: 3px; font-weight: bold; font-size: 12px; animation: fadeUp 1s ease-out forwards; z-index: 1000; `; countWrapper.appendChild(plusOne); setTimeout(() => {if (plusOne && plusOne.parentNode) {plusOne.remove()}}, 300)} function minimize() {const controls = document.getElementById('trae-controls'); const panel = document.getElementById('trae-panel'); const header = document.getElementById('trae-header'); const minimizedContent = document.getElementById('trae-minimized-content'); const title = document.getElementById('trae-title'); const minimizedTitle = document.getElementById('trae-minimized-title'); if (!controls || !panel || !header || !minimizedContent) return; if (isPanelMinimized) {controls.style.display = 'block'; header.style.display = 'flex'; minimizedContent.style.display = 'none'; panel.style.padding = ''; panel.style.removeProperty('min-width'); panel.style.removeProperty('width'); panel.style.removeProperty('max-width'); title.style.display = 'block'; minimizedTitle.style.display = 'none'; panel.style.removeProperty('display'); panel.style.removeProperty('align-items'); panel.style.removeProperty('justify-content'); isPanelMinimized = false; updateMinimizeButton(false); applyTheme(); applyPanelSize(); updateSizeControls()} else {controls.style.display = 'none'; header.style.display = 'none'; minimizedContent.style.display = 'flex'; panel.style.padding = '8px 12px'; panel.style.minWidth = 'auto'; panel.style.width = 'auto'; panel.style.maxWidth = 'auto'; title.style.display = 'none'; minimizedTitle.style.display = 'block'; panel.style.display = 'flex'; panel.style.alignItems = 'center'; panel.style.justifyContent = 'center'; isPanelMinimized = true; updateMinimizeButton(true); applyTheme()}} function destroy() {if (!confirm('Á°ÆÂÆöË¶ÅÈÄÄÂá∫ TraeCN Ëá™Âä®Êìç‰ΩúÂêóÔºü')) return; stop(); document.removeEventListener('keydown', handleGlobalHotkey, true); cancelCommandHotkeyBinding(false); window.focusCommandInputArea = undefined; if (chatLayoutObserver) {chatLayoutObserver.disconnect(); chatLayoutObserver = null} const panel = document.getElementById('trae-panel'); if (panel) panel.remove(); document.querySelectorAll('[id^="trae-"]').forEach(el => el.remove()); delete window.traeAutoAccept; console.log('üîö TraeCN Ëá™Âä®Êìç‰ΩúÂ∑≤ÂÆåÂÖ®ÈÄÄÂá∫')} function applyPanelSize() {const panel = document.getElementById('trae-panel'); if (!panel) return; const size = PANEL_SIZES[panelSizeIndex] || PANEL_SIZES[0]; panel.style.width = `${size.width}px`; panel.style.setProperty('--log-list-max-height', `${size.logMax}px`); panel.style.setProperty('--command-list-max-height', `${size.commandMax}px`); const sizeName = panelSizeIndex === 0 ? 'compact' : panelSizeIndex === 1 ? 'medium' : 'large'; panel.dataset.size = sizeName} function updateSizeControls() {const enlargeBtn = document.getElementById('trae-size-increase'); const shrinkBtn = document.getElementById('trae-size-decrease'); if (!enlargeBtn || !shrinkBtn) return; enlargeBtn.disabled = panelSizeIndex >= PANEL_SIZES.length - 1; shrinkBtn.disabled = panelSizeIndex <= 0} function increasePanelSize() {if (panelSizeIndex < PANEL_SIZES.length - 1) {panelSizeIndex += 1; applyPanelSize(); updateSizeControls(); log(`üîç Èù¢ÊùøÊîæÂ§ßËá≥ ${PANEL_SIZES[panelSizeIndex].width}px`)} else {log('‚ö†Ô∏è Â∑≤ËææÂà∞ÊúÄÂ§ßÈù¢ÊùøÂ∞∫ÂØ∏')}} function decreasePanelSize() {if (panelSizeIndex > 0) {panelSizeIndex -= 1; applyPanelSize(); updateSizeControls(); log(`üîç Èù¢ÊùøÁº©Â∞èËá≥ ${PANEL_SIZES[panelSizeIndex].width}px`)} else {log('‚ö†Ô∏è Â∑≤ËææÂà∞ÊúÄÂ∞èÈù¢ÊùøÂ∞∫ÂØ∏')}} function createPanel() {if (document.getElementById('trae-panel')) {console.log('ÊéßÂà∂Èù¢ÊùøÂ∑≤Â≠òÂú®'); return} const panel = document.createElement('div'); panel.id = 'trae-panel'; panel.innerHTML = ` <div id="trae-minimized-content" style="display: none; justify-content: space-between; align-items: center; width: 100%;"><div style="display: flex; align-items: center; flex: 1;"><div id="trae-status-icon-minimized" style="width: 16px; height: 16px; border-radius: 50%; margin-right: 8px;"></div><div style="display: flex; flex-direction: column; align-items: flex-start;"><div id="trae-minimized-title" style="font-weight: bold; user-select: none; font-size: 12px;">Auto 0/‚àû<span class="trae-plus-placeholder"></span></div><div id="trae-queue-status" style="font-size: 10px; color: #666; display: none;">ÈòüÂàó: 0 ‰∏™ÂëΩ‰ª§</div></div></div><button id="trae-minimize-minimized" title="Êî∂Ëµ∑" style="margin-left: 8px;">Ôºç</button></div><div id="trae-header"><div class="trae-header-left"><div id="trae-status-icon" style="width: 16px; height: 16px; border-radius: 50%; margin-right: 8px;"></div><div id="trae-title" style="font-weight: bold; user-select: none;">Auto 0/‚àû<span class="trae-plus-placeholder"></span></div></div><div id="trae-header-actions"><button id="trae-size-decrease" class="trae-header-button" title="Áº©Â∞èÈù¢Êùø">A-</button><button id="trae-size-increase" class="trae-header-button" title="ÊîæÂ§ßÈù¢Êùø">A+</button><button id="trae-minimize" class="trae-header-button" title="Êî∂Ëµ∑">Ôºç</button></div></div><div id="trae-controls"><!-- ÂäüËÉΩÂÖ•Âè£ÂíåÈÖçÁΩÆÂå∫Âüü --><div style="display: flex; justify-content: center; align-items: center; gap: 30px;"><!-- ÂäüËÉΩÂÖ•Âè£ÊåâÈíÆÁªÑ --><div style="display: flex; gap: 8px;"><button id="trae-toggle" style="background: transparent; color: var(--text-primary); padding: 10px 16px; margin: 2px; border-radius: 8px; cursor: pointer; font-weight: 600; border: none; transition: all 0.2s ease;">ÂêØÂä®</button><button id="trae-theme" style="background: transparent; color: var(--text-primary); padding: 10px 16px; margin: 2px; border-radius: 8px; cursor: pointer; font-weight: 600; border: 1px solid var(--border-color); transition: all 0.2s ease;">‰∏ªÈ¢ò</button><button id="trae-exit" style="background: transparent; color: var(--warning); padding: 10px 16px; margin: 2px; border-radius: 8px; cursor: pointer; font-weight: 600; border: 1px solid var(--warning); transition: all 0.2s ease;">ÈÄÄÂá∫</button></div><!-- ÈÖçÁΩÆÈÄâÈ°πÂå∫Âüü --><div style="display: flex; flex-direction: column; gap: 6px;"><div class="trae-config-row"><span>Ëá™Âä®Âà†Èô§</span><input type="checkbox" id="trae-enable-delete"></div><div class="trae-config-row"><span>ÈôêÈ¢ù</span><input type="number" id="trae-click-limit" min="0" max="99" value="5"></div><div class="trae-config-row"><span>Âø´Êç∑ÈîÆ</span><button id="trae-command-hotkey-button" class="trae-hotkey-inline-button" data-state="empty">[ÁÇπÂáªËÆæÁΩÆ]</button></div></div></div><!-- ÂëΩ‰ª§ËæìÂÖ•Âå∫Âüü - ÂßãÁªàÂèØËßÅ --><div id="trae-command-input-area"><textarea id="trae-command-input" placeholder="ËæìÂÖ•ÂëΩ‰ª§... Êåâ Ctrl+Enter Êàñ Cmd+Enter Êèê‰∫§" onkeydown="if((event.key==='Enter' && (event.ctrlKey || event.metaKey)) || (event.key==='Enter' && event.altKey)){event.preventDefault();addCommand()} else if(event.key==='Enter'){event.stopPropagation()}"></textarea></div><!-- ÊäΩÂ±âÂºèÂëΩ‰ª§ÂàóË°®Âå∫Âüü --><div id="trae-command-drawer"><!-- ÂëΩ‰ª§ÂàóË°®Â§¥ÈÉ® --><div id="trae-command-toggle"><div><span id="trae-command-arrow">‚ñº</span><span>ÂëΩ‰ª§ÂàóË°®</span></div><span id="trae-command-count">0 ‰∏™ÂëΩ‰ª§</span></div><!-- ÂëΩ‰ª§ÂàóË°®ÂÜÖÂÆπÂå∫Âüü --><div id="trae-command-content" style="display: block;"><div id="trae-command-list" style="max-height: var(--command-list-max-height, 200px); overflow-y: auto; background: var(--bg-primary); border-top: 1px solid var(--border-color);" data-theme-bg="white" data-theme-border="#e0e0e0"><div id="trae-command-items" style="padding: 12px 16px;"></div></div></div></div><!-- ÊäΩÂ±âÂºèÊìç‰ΩúÊó•Âøó --><div id="trae-log-drawer"><div id="trae-log-toggle"><div><span id="trae-log-arrow">‚ñ∂</span><span>Êìç‰ΩúÊó•Âøó</span></div><span id="trae-log-count">0 Êù°</span></div><div id="trae-log-content"><div id="trae-log-list"></div></div></div></div> `; document.body.appendChild(panel); updateMinimizedTitle(); const sizeIncreaseBtn = document.getElementById('trae-size-increase'); const sizeDecreaseBtn = document.getElementById('trae-size-decrease'); if (sizeIncreaseBtn) {sizeIncreaseBtn.addEventListener('click', () => {increasePanelSize()})} if (sizeDecreaseBtn) {sizeDecreaseBtn.addEventListener('click', () => {decreasePanelSize()})} applyPanelSize(); updateSizeControls(); const style = document.createElement('style'); style.id = 'trae-panel-styles'; style.textContent = ` #trae-panel {position: fixed; top: 20px; right: 20px; background: #ffffff; color: #333333; padding: 20px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); border: 1px solid #e0e0e0; z-index: 999999; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; min-width: 340px; max-width: 70vw; width: 420px; transition: all 0.3s ease; display: flex; flex-direction: column; gap: 12px; backdrop-filter: blur(10px); max-height: 85vh; overflow: hidden} #trae-panel.trae-panel-dragging {cursor: grabbing} #trae-panel * {box-sizing: border-box} #trae-header {display: flex; justify-content: space-between; align-items: center; gap: 12px; margin-bottom: 6px; cursor: grab; user-select: none} #trae-header:active {cursor: grabbing} .trae-header-left {display: flex; align-items: center} #trae-header-actions {display: flex; align-items: center; gap: 6px} .trae-header-button {background: transparent; border: 1px solid #e0e0e0; color: #333333; padding: 4px 6px; border-radius: 6px; cursor: pointer; font-size: 10px; font-weight: 600; transition: background-color 0.2s ease, color 0.2s ease} .trae-header-button:hover:not(:disabled) {background: #f5f5f5; color: #4096ff} .trae-header-button:disabled {opacity: 0.4; cursor: not-allowed} #trae-minimize, #trae-minimize-minimized {display: flex; align-items: center; justify-content: center} #trae-minimize {min-width: 32px; min-height: 24px} #trae-minimize-minimized {background: transparent; border: 1px solid var(--border-color); border-radius: 6px; padding: 4px 6px; cursor: pointer; transition: background-color 0.2s ease, color 0.2s ease} #trae-minimize-minimized:hover {background: var(--bg-tertiary); color: var(--info)} #trae-toggle, #trae-theme, #trae-exit {background: transparent; border: none; color: var(--text-primary); padding: 10px 16px; margin: 2px; border-radius: 8px; cursor: pointer; font-weight: 600; transition: all 0.2s ease} #trae-theme {border: 1px solid var(--border-color)} #trae-exit {border: 1px solid var(--warning); color: var(--warning)} #trae-status-icon {width: 16px; height: 16px; border-radius: 50%; margin-right: 8px} #trae-title {font-weight: bold; user-select: none} #trae-controls {display: flex; flex-direction: column; gap: 15px} #trae-controls > div:first-child {display: flex; justify-content: center; align-items: center; gap: 30px} #trae-controls > div > div:last-child {display: flex; flex-direction: column; gap: 6px} #trae-controls > div > div:last-child > div {display: flex; align-items: center; gap: 4px} #trae-controls span {font-size: 10px; color: var(--text-tertiary)} #trae-enable-delete {width: 11px; height: 11px; margin: 0; accent-color: var(--info)} #trae-click-limit {width: 45px; padding: 2px 4px; border-radius: 2px; font-size: 11px; border: 1px solid var(--input-border); outline: none; text-align: center; background: var(--input-bg); color: var(--text-primary); -moz-appearance: textfield; appearance: textfield} #trae-click-limit::-webkit-outer-spin-button, #trae-click-limit::-webkit-inner-spin-button {-webkit-appearance: none; margin: 0} #trae-log-drawer, #trae-command-drawer {border-radius: 8px; border: 1px solid var(--border-color); overflow: hidden; background: var(--bg-secondary)} #trae-log-toggle, #trae-command-toggle {display: flex; justify-content: space-between; align-items: center; padding: 10px 12px; cursor: pointer; transition: background-color 0.2s ease; user-select: none; background: var(--bg-primary); color: var(--text-primary)} #trae-log-toggle:hover, #trae-command-toggle:hover {background-color: var(--bg-tertiary)} #trae-log-content, #trae-command-content {display: none; border-top: 1px solid var(--border-color); background: var(--bg-primary)} #trae-log-content {max-height: var(--log-list-max-height, 150px); overflow-y: auto} #trae-log-list {display: flex; flex-direction: column; align-items: flex-start; width: 100%; padding: 8px; font-size: 11px; font-family: 'Monaco', 'Menlo', monospace} #trae-panel .trae-log-item {display: flex; text-align: left !important; align-items: flex-start !important; justify-content: flex-start !important; width: 100%; gap: 6px; border-radius: 3px; font-size: 11px; direction: ltr} #trae-panel .trae-log-item.success {color: var(--success)} #trae-panel .trae-log-item.warning {color: var(--warning)} #trae-panel .trae-log-item.info {color: var(--text-tertiary)} #trae-panel .trae-log-item .trae-log-time {color: var(--text-tertiary); font-size: 10px; white-space: nowrap; min-width: 50px} #trae-panel .trae-log-item .trae-log-text {flex: 1; line-height: 1.4; text-align: left !important; align-self: flex-start; word-break: break-word} #trae-command-input-area {border-radius: 8px; border: 1px solid var(--border-color); background: var(--bg-primary); overflow: hidden; display: flex; flex-direction: column; gap: 0} .trae-config-row {display: flex; align-items: center; gap: 6px; font-size: 12px; color: var(--text-secondary)} .trae-config-row > span {min-width: 48px; color: var(--text-primary)} .trae-config-row input[type="number"] {width: 50px; padding: 2px 4px; border-radius: 3px; border: 1px solid var(--input-border); background: var(--input-bg); color: var(--text-primary); font-size: 12px} .trae-hotkey-inline-button {border: 1px solid var(--border-color); background: var(--bg-secondary); color: var(--text-primary); padding: 2px 8px; border-radius: 4px; cursor: pointer; font-size: 12px; line-height: 1.4; transition: all 0.2s ease} .trae-hotkey-inline-button[data-state="empty"] {color: var(--text-secondary)} .trae-hotkey-inline-button[data-state="binding"] {color: var(--warning); border-color: var(--warning)} .trae-hotkey-inline-button[data-state="set"] {color: var(--info); border-color: var(--info)} .trae-hotkey-inline-button:hover {border-color: var(--info); color: var(--info)} #trae-command-input {height: 60px; padding: 0; border-radius: 6px; font-size: 13px; border: 2px solid var(--input-border); outline: none; transition: border-color 0.2s ease; background: var(--input-bg); color: var(--text-primary); resize: none; font-family: inherit; line-height: 1.4; overflow: hidden; box-sizing: border-box} #trae-command-input:focus {border-color: var(--info); background: var(--input-bg); box-shadow: 0 0 0 3px rgba(64, 150, 255, 0.1)} #trae-add-command {background: var(--info); color: white; padding: 8px 12px; border-radius: 4px; cursor: pointer; font-weight: 600; border: none; box-shadow: 0 2px 8px rgba(64, 150, 255, 0.3); transition: all 0.2s ease; font-size: 12px; min-width: 40px; width: 72px; height: 60px; display: flex; align-items: center; justify-content: center; flex: 0 0 72px} #trae-add-command:hover {background: #3a8ee6; transform: scale(0.95)} #trae-add-command:active {transform: scale(0.9)} #trae-add-command:disabled {background: #c0c4cc; cursor: not-allowed; box-shadow: none} #trae-command-list {max-height: var(--command-list-max-height, 200px); overflow-y: auto; background: var(--bg-primary); border-top: 1px solid var(--border-color)} #trae-command-items {padding: 12px 16px} #trae-panel .trae-command-item {background: var(--command-bg); border: 1px solid var(--command-border); border-radius: 6px; padding: 10px 12px; margin-bottom: 6px; transition: background-color 0.2s ease, border-color 0.2s ease; display: grid; grid-template-columns: auto auto 1fr auto; align-items: flex-start; gap: 8px} #trae-panel .trae-command-item:hover {background: var(--bg-tertiary)} #trae-panel .trae-command-item.completed {opacity: 0.6} #trae-panel .trae-command-item.completed .trae-command-text {color: var(--text-tertiary); text-decoration: line-through} #trae-panel .trae-command-item.trae-dragging {opacity: 0.5} #trae-panel .trae-command-item.trae-drag-over {border: 2px dashed var(--info); background: rgba(64, 150, 255, 0.08)} #trae-panel .trae-command-item .trae-command-drag-handle {display: flex; align-items: center; justify-content: center; color: var(--text-tertiary); cursor: grab; font-size: 12px; user-select: none; -webkit-user-select: none; padding: 2px; border-radius: 4px} #trae-panel .trae-command-item .trae-command-drag-handle:hover {background: rgba(64, 150, 255, 0.1); color: var(--info)} #trae-panel .trae-command-item .trae-command-drag-handle:active {cursor: grabbing} #trae-panel .trae-command-item .trae-command-status {font-size: 12px; color: var(--text-secondary)} #trae-panel .trae-command-item .trae-command-text {font-size: 12px; word-break: break-word; cursor: text; user-select: text; -webkit-user-select: text; -moz-user-select: text; -ms-user-select: text; line-height: 1.5} #trae-panel[data-size="compact"] .trae-command-item {align-items: center; grid-template-columns: auto auto 1fr auto} #trae-panel[data-size="compact"] .trae-command-item .trae-command-text {white-space: nowrap; overflow: hidden; text-overflow: ellipsis} #trae-panel[data-size="compact"] .trae-command-item .trae-command-status {align-self: center} #trae-panel .trae-command-item .trae-command-delete {color: var(--warning); cursor: pointer; font-size: 14px; padding: 2px 6px; border-radius: 4px; align-self: center} #trae-panel .trae-command-item .trae-command-delete:hover {background: rgba(231, 76, 60, 0.12)} #trae-minimized-content {display: none; justify-content: space-between; align-items: center; width: 100%} #trae-minimized-title {font-weight: bold; user-select: none; font-size: 12px} #trae-queue-status {font-size: 10px; color: var(--text-tertiary)} #trae-status-icon-minimized {width: 16px; height: 16px; border-radius: 50%; margin-right: 8px} @keyframes fadeUp {0% {opacity: 0; transform: translateY(0)} 30% {opacity: 1; transform: translateY(-5px)} 100% {opacity: 0; transform: translateY(-30px)}} #trae-panel ::-webkit-scrollbar {width: 6px} #trae-panel ::-webkit-scrollbar-track {background: var(--bg-secondary); border-radius: 3px} #trae-panel ::-webkit-scrollbar-thumb {background: var(--border-color); border-radius: 3px; opacity: 0.6} #trae-panel ::-webkit-scrollbar-thumb:hover {background: var(--info); opacity: 1} #trae-panel .trae-dragging {opacity: 0.5} #trae-panel .trae-drag-over {border: 2px dashed var(--info) !important; background: rgba(64, 150, 255, 0.1) !important} #trae-panel #trae-log-content::-webkit-scrollbar-track, #trae-panel #trae-command-list::-webkit-scrollbar-track {background: var(--bg-secondary); border-radius: 3px} #trae-panel #trae-log-content::-webkit-scrollbar-thumb, #trae-panel #trae-command-list::-webkit-scrollbar-thumb {background: var(--border-color); border-radius: 3px; opacity: 0.6} #trae-panel #trae-log-content::-webkit-scrollbar-thumb:hover, #trae-panel #trae-command-list::-webkit-scrollbar-thumb:hover {background: var(--info); opacity: 1} #trae-panel #trae-add-command:hover:not(:disabled) {background: #3a8ee6; transform: scale(0.95)} #trae-panel #trae-add-command:active:not(:disabled) {transform: scale(0.9)} #trae-panel #trae-add-command:not(:disabled) {background: #4096ff; cursor: pointer; box-shadow: 0 2px 8px rgba(64, 150, 255, 0.3)} #trae-panel #trae-add-command:disabled {background: #c0c4cc; cursor: not-allowed; box-shadow: none} #trae-panel #trae-command-input:focus {outline: none; border-color: var(--info); background: var(--input-bg); box-shadow: 0 0 0 3px rgba(64, 150, 255, 0.1)} #trae-panel #trae-command-input {resize: none !important; min-height: 60px !important; max-height: 60px !important; height: 60px !important} `; document.head.appendChild(style); const minimizeBtn = document.getElementById('trae-minimize'); const minimizeBtnMinimized = document.getElementById('trae-minimize-minimized'); const toggleBtn = document.getElementById('trae-toggle'); const exitBtn = document.getElementById('trae-exit'); const themeBtn = document.getElementById('trae-theme'); const limitInput = document.getElementById('trae-click-limit'); const deleteCheckbox = document.getElementById('trae-enable-delete'); const commandInput = document.getElementById('trae-command-input'); const hotkeyButton = document.getElementById('trae-command-hotkey-button'); const logToggle = document.getElementById('trae-log-toggle'); const logContent = document.getElementById('trae-log-content'); const logArrow = document.getElementById('trae-log-arrow'); const commandToggle = document.getElementById('trae-command-toggle'); const commandContent = document.getElementById('trae-command-content'); const commandArrow = document.getElementById('trae-command-arrow'); const panelHeader = document.getElementById('trae-header'); const controls = document.getElementById('trae-controls'); let logCollapseTimer = null; let isLogExpanded = false; let isCommandExpanded = true; function collapseLog() {if (isLogExpanded) {logContent.style.display = 'none'; logArrow.textContent = '‚ñ∂'; isLogExpanded = false}} function expandLog() {if (!isLogExpanded) {logContent.style.display = 'block'; logArrow.textContent = '‚ñº'; isLogExpanded = true; if (logCollapseTimer) {clearTimeout(logCollapseTimer)} logCollapseTimer = setTimeout(() => {collapseLog()}, 5000)}} function collapseCommand() {if (isCommandExpanded) {commandContent.style.display = 'none'; commandArrow.textContent = '‚ñ∂'; isCommandExpanded = false}} function expandCommand() {if (!isCommandExpanded) {commandContent.style.display = 'block'; commandArrow.textContent = '‚ñº'; isCommandExpanded = true}} function focusCommandInputAreaHotkey() {if (controls && isPanelMinimized) {minimize()} expandCommand(); if (commandInput) {commandInput.focus(); const end = commandInput.value.length; try {commandInput.setSelectionRange(end, end)} catch (error) {}}} window.focusCommandInputArea = focusCommandInputAreaHotkey; logToggle.addEventListener('click', () => {if (isLogExpanded) {collapseLog(); if (logCollapseTimer) {clearTimeout(logCollapseTimer)}} else {expandLog()}}); commandToggle.addEventListener('click', () => {if (isCommandExpanded) {collapseCommand()} else {expandCommand()}}); document.addEventListener('click', (e) => {if (isLogExpanded && !e.target.closest('#trae-log-drawer')) {collapseLog(); if (logCollapseTimer) {clearTimeout(logCollapseTimer)}}}); if (panelHeader) {panelHeader.addEventListener('click', e => !e.target.closest('button') && minimize())} minimizeBtn.addEventListener('click', e => {e.stopPropagation(); minimize()}); minimizeBtnMinimized.addEventListener('click', e => {e.stopPropagation(); minimize()}); toggleBtn.addEventListener('click', toggle); exitBtn.addEventListener('click', e => {e.stopPropagation(); destroy()}); themeBtn.addEventListener('click', e => {e.stopPropagation(); toggleTheme()}); if (limitInput) {limitInput.addEventListener('input', e => {e.stopPropagation(); updateClickLimit(e.target.value)})} if (deleteCheckbox) {deleteCheckbox.addEventListener('change', e => {e.stopPropagation(); enableDelete = e.target.checked})} if (commandInput) {} if (hotkeyButton) {hotkeyButton.addEventListener('click', e => {e.stopPropagation(); if (isBindingCommandHotkey) {cancelCommandHotkeyBinding()} else {beginCommandHotkeyBinding()}})} updateMinimizeButton(false); applyTheme(); updateMinimizedTitle(); if (logContent) {logContent.style.display = 'none'; if (logArrow) logArrow.textContent = '‚ñ∂'; isLogExpanded = false} if (commandContent) {commandContent.style.display = 'block'; if (commandArrow) commandArrow.textContent = '‚ñº'; isCommandExpanded = true} const beginPanelDrag = (event) => {if (event.target.closest('button') || event.target.closest('#trae-header-actions')) {return} isDragging = true; dragOffset.x = event.clientX - panel.offsetLeft; dragOffset.y = event.clientY - panel.offsetTop; panel.classList.add('trae-panel-dragging')}; const endPanelDrag = () => {if (isDragging) {isDragging = false; panel.classList.remove('trae-panel-dragging')}}; if (panelHeader) {panelHeader.addEventListener('mousedown', beginPanelDrag)} const minimizedContent = document.getElementById('trae-minimized-content'); if (minimizedContent) {minimizedContent.addEventListener('mousedown', (event) => {if (event.target.closest('button')) return; beginPanelDrag(event)})} document.addEventListener('mousemove', e => {if (!isDragging) return; e.preventDefault(); const newLeft = e.clientX - dragOffset.x; const newTop = e.clientY - dragOffset.y; const windowWidth = window.innerWidth; const windowHeight = window.innerHeight; const panelRect = panel.getBoundingClientRect(); const margin = 20; panel.style.left = Math.max(margin, Math.min(newLeft, windowWidth - panelRect.width - margin)) + 'px'; panel.style.top = Math.max(margin, Math.min(newTop, windowHeight - panelRect.height - margin)) + 'px'; panel.style.right = 'auto'}); document.addEventListener('mouseup', endPanelDrag); log('üéØ TraeCN Ëá™Âä®Êìç‰ΩúËÑöÊú¨Â∑≤Âä†ËΩΩ'); log(`üìù Êó•ÂøóÁºìÂÜ≤Âå∫: ${LOG_BUFFER_SIZE} Êù°`); log('‚ú® ÊîØÊåÅÂäüËÉΩ: Ëá™Âä®ÁÇπÂáªÁªßÁª≠„ÄÅËøêË°å„ÄÅÊé•ÂèóÊåâÈíÆ' + (enableDelete ? '„ÄÅ<span style="color: #e74c3c; font-weight: bold;">Âà†Èô§ÊåâÈíÆ</span>' : ''))} window.addCommand = addCommand; window.removeCommand = removeCommand; window.handleCommandDragStart = function (event, commandId) {isCommandDragging = true; draggedCommand = commands.find(cmd => cmd.id === commandId); event.dataTransfer.effectAllowed = 'move'; const dragContainer = event.currentTarget && event.currentTarget.closest ? event.currentTarget.closest('.trae-command-item') : event.currentTarget; if (dragContainer) {event.dataTransfer.setData('text/html', dragContainer.innerHTML)} else {event.dataTransfer.setData('text/html', '')} event.dataTransfer.setData('commandId', commandId); if (dragContainer && dragContainer.classList) {dragContainer.classList.add('trae-dragging')} event.stopPropagation()}; window.handleCommandDragOver = function (event) {if (event.preventDefault) {event.preventDefault()} const target = event.currentTarget; if (target && target.classList) {target.classList.add('trae-drag-over')} event.dataTransfer.dropEffect = 'move'; return false}; window.handleCommandDragLeave = function (event) {const target = event.currentTarget; if (target && target.classList) {target.classList.remove('trae-drag-over')}}; window.handleCommandDrop = function (event, targetCommandId) {if (event.stopPropagation) {event.stopPropagation()} const targetElement = event.currentTarget; if (targetElement && targetElement.classList) {targetElement.classList.remove('trae-drag-over')} if (isCommandDragging && draggedCommand) {const targetIndex = commands.findIndex(cmd => cmd.id === targetCommandId); const draggedIndex = commands.findIndex(cmd => cmd.id === draggedCommand.id); if (targetIndex !== -1 && draggedIndex !== -1 && targetIndex !== draggedIndex) {if (draggedCommand.status === 'pending') {const targetCommand = commands[targetIndex]; if (targetCommand.status === 'pending') {commands.splice(draggedIndex, 1); commands.splice(targetIndex, 0, draggedCommand); updateCommandList(); const commandText = draggedCommand.text.length > 15 ? draggedCommand.text.substring(0, 15) + '...' : draggedCommand.text; log(`üîÑ Â∑≤ÊãñÊãΩÁßªÂä®ÂëΩ‰ª§ "${commandText}"`)}}}} return false}; window.handleCommandDragEnd = function (event) {isCommandDragging = false; const dragContainer = event && event.currentTarget && event.currentTarget.closest ? event.currentTarget.closest('.trae-command-item') : null; if (dragContainer && dragContainer.classList) {dragContainer.classList.remove('trae-dragging'); dragContainer.classList.remove('trae-drag-over')} document.querySelectorAll('.trae-drag-over').forEach(el => el.classList.remove('trae-drag-over')); draggedCommand = null}; window.traeAutoAccept = {start, stop, toggle, click: findAndClick, destroy, exit: destroy, toggleTheme, setTheme: (dark) => {isDarkMode = dark; applyTheme()}, setClickLimit: updateClickLimit, getClickCount: () => clickCount, getClickLimit: () => clickLimit, simulateClickAnimation: () => showClickAnimation(true), addCommand: (command) => {commands.push({id: Date.now(), text: command, status: 'pending'}); updateCommandList(); log(`‚úÖ Â∑≤Ê∑ªÂä†ÂëΩ‰ª§: ${command}`)}, removeCommand: (id) => removeCommand(id), getCommands: () => commands, clearCommands: () => {commands = []; updateCommandList(); log('üóëÔ∏è Â∑≤Ê∏ÖÁ©∫ÊâÄÊúâÂëΩ‰ª§')}}; loadCommandHotkey(); updateCommandHotkeyUI(); document.removeEventListener('keydown', handleGlobalHotkey, true); document.addEventListener('keydown', handleGlobalHotkey, true); createPanel(); startChatLayoutObserver(); console.log('üéØ TraeCN Ëá™Âä®Êìç‰ΩúËÑöÊú¨Â∑≤Âä†ËΩΩ'); console.log('üí° ‰ΩøÁî®ÊñπÊ≥ï:'); console.log(' - traeAutoAccept.toggle() // ÂêØÂä®/ÂÅúÊ≠¢'); console.log(' - traeAutoAccept.start() // ÂêØÂä®'); console.log(' - traeAutoAccept.stop() // ÂÅúÊ≠¢'); console.log(' - traeAutoAccept.toggleTheme() // ÂàáÊç¢‰∏ªÈ¢ò'); console.log(' - traeAutoAccept.destroy() // ÈÄÄÂá∫'); console.log(' - traeAutoAccept.setClickLimit(n) // ËÆæÁΩÆÁÇπÂáªÈôêÂà∂ (0=Êó†ÈôêÂà∂)'); console.log(' - traeAutoAccept.getClickCount() // Ëé∑ÂèñÂΩìÂâçÁÇπÂáªÊ¨°Êï∞'); console.log(' - traeAutoAccept.getClickLimit() // Ëé∑ÂèñÁÇπÂáªÈôêÂà∂'); console.log(' - traeAutoAccept.simulateClickAnimation() // Ê®°Êãü+1Âä®ÁîªÊïàÊûú'); console.log(''); console.log('üí° ÂëΩ‰ª§ÈòüÂàóÂäüËÉΩ:'); console.log(' - traeAutoAccept.addCommand("ÂëΩ‰ª§ÂÜÖÂÆπ") // Ê∑ªÂä†ÂëΩ‰ª§'); console.log(' - traeAutoAccept.removeCommand(id) // Âà†Èô§ÂëΩ‰ª§'); console.log(' - traeAutoAccept.startCommandQueue() // ÂêØÂä®ÂëΩ‰ª§ÈòüÂàó'); console.log(' - traeAutoAccept.stopCommandQueue() // ÂÅúÊ≠¢ÂëΩ‰ª§ÈòüÂàó'); console.log(' - traeAutoAccept.getCommands() // Ëé∑ÂèñÊâÄÊúâÂëΩ‰ª§'); console.log(' - traeAutoAccept.clearCommands() // Ê∏ÖÁ©∫ÊâÄÊúâÂëΩ‰ª§'); console.log('üí° ÊéßÂà∂Âè∞Â∞ÜÂú®10ÁßíÂêéÂÖ≥Èó≠');console.log('üïí TraeCN ËÑöÊú¨ÊûÑÂª∫Êó∂Èó¥: 2025-09-23T10:04:11.647Z');})();