(function () {'use strict'; const LOG_BUFFER_SIZE = 50; let isRunning = false, interval, isDarkMode = false; let isDragging = false, dragOffset = {x: 0, y: 0}; let isCommandDragging = false, draggedCommand = null; let clickLimit = 5, clickCount = 0; let enableDelete = false; let commands = []; const PANEL_SIZES = [ {width: 360, logMax: 140, commandMax: 200}, {width: 420, logMax: 180, commandMax: 240}, {width: 540, logMax: 240, commandMax: 320} ]; let panelSizeIndex = 1; const THEMES = {light: {'--bg-primary': '#ffffff', '--bg-secondary': '#f8f9fa', '--bg-tertiary': '#f5f5f5', '--text-primary': '#333333', '--text-secondary': '#666666', '--text-tertiary': '#8c8c8c', '--border-color': '#e0e0e0', '--border-light': '#ddd', '--shadow': '0 4px 6px rgba(0,0,0,0.1)', '--success': '#27ae60', '--warning': '#e74c3c', '--info': '#4096ff', '--panel-bg': '#ffffff', '--panel-border': '1px solid #e0e0e0', '--input-bg': '#fafafa', '--input-border': '#e0e0e0', '--button-bg': 'transparent', '--button-border': '1px solid #ddd', '--log-bg': '#fafafa', '--log-border': '#e0e0e0', '--command-bg': '#f5f7fa', '--command-border': '#e0e0e0'}, dark: {'--bg-primary': '#2c3e50', '--bg-secondary': '#34495e', '--bg-tertiary': '#1a252f', '--text-primary': '#ffffff', '--text-secondary': '#bbbbbb', '--text-tertiary': '#999999', '--border-color': '#4a5f7a', '--border-light': '#666666', '--shadow': '0 4px 6px rgba(0,0,0,0.3)', '--success': '#27ae60', '--warning': '#e74c3c', '--info': '#4096ff', '--panel-bg': '#2c3e50', '--panel-border': 'none', '--input-bg': '#34495e', '--input-border': '#4a5f7a', '--button-bg': 'transparent', '--button-border': '1px solid #666', '--log-bg': '#2c3e50', '--log-border': '#4a5f7a', '--command-bg': '#34495e', '--command-border': '#4a5f7a'}}; function applyTheme() {const theme = THEMES[isDarkMode ? 'dark' : 'light']; const root = document.documentElement; Object.entries(theme).forEach(([key, value]) => {root.style.setProperty(key, value)}); const statusIcon = document.getElementById('trae-status-icon'); const statusIconMinimized = document.getElementById('trae-status-icon-minimized'); const statusColor = isRunning ? theme['--success'] : theme['--text-tertiary']; if (statusIcon) statusIcon.style.background = statusColor; if (statusIconMinimized) statusIconMinimized.style.background = statusColor; const toggleBtn = document.getElementById('trae-toggle'); if (toggleBtn) {const buttonColor = isRunning ? theme['--text-tertiary'] : theme['--success']; toggleBtn.style.cssText = `background:var(--button-bg);border:1px solid ${buttonColor};color:${buttonColor};padding:8px 12px;margin:2px;border-radius:4px;cursor:pointer;font-weight:bold`; toggleBtn.textContent = isRunning ? '停止' : '启动'} const commandInput = document.getElementById('trae-command-input'); if (commandInput) {commandInput.onfocus = function () {this.style.borderColor = theme['--info']; this.style.background = theme['--input-bg']}; commandInput.onblur = function () {this.style.borderColor = theme['--input-border']; this.style.background = theme['--input-bg']}; commandInput.style.borderColor = theme['--input-border']; commandInput.style.background = theme['--input-bg']} const deleteCheckbox = document.getElementById('trae-enable-delete'); if (deleteCheckbox) {deleteCheckbox.style.accentColor = theme['--info']} const clickLimitInput = document.getElementById('trae-click-limit'); if (clickLimitInput) {clickLimitInput.style.cssText = `width:35px;padding:2px 4px;border-radius:2px;font-size:11px;border:1px solid var(--input-border);outline:none;text-align:center;background:var(--input-bg);color:var(--text-primary);`} const commandItems = document.querySelectorAll('.command-item'); commandItems.forEach(item => {item.style.background = theme['--command-bg']; item.style.border = `1px solid ${theme['--command-border']}`}); const commandTexts = document.querySelectorAll('.command-text, .command-status'); commandTexts.forEach(text => {text.style.color = theme['--text-primary']}); if (commandInput) {commandInput.removeEventListener('focus', commandInput._focusHandler); commandInput.removeEventListener('blur', commandInput._blurHandler); commandInput._focusHandler = function () {this.style.borderColor = theme['--info']; this.style.background = theme['--input-bg']}; commandInput._blurHandler = function () {this.style.borderColor = theme['--input-border']; this.style.background = theme['--input-bg']}; commandInput.addEventListener('focus', commandInput._focusHandler); commandInput.addEventListener('blur', commandInput._blurHandler)}} function toggleTheme() {isDarkMode = !isDarkMode; applyTheme(); log(`🎨 切换到${isDarkMode ? '深色' : '浅色'}模式`)} function log(msg) {const logList = document.getElementById('trae-log-list'); const logCount = document.getElementById('trae-log-count'); const logArrow = document.getElementById('trae-log-arrow'); if (!logList) return; let logType = 'info'; let logIcon = 'ℹ️'; let cleanMsg = msg; if (msg.includes('✅')) {logType = 'success'; logIcon = '✅'; cleanMsg = msg.replace('✅', '').trim()} else if (msg.includes('❌')) {logType = 'warning'; logIcon = '❌'; cleanMsg = msg.replace('❌', '').trim()} else if (msg.includes('⚠️')) {logType = 'warning'; logIcon = '⚠️'; cleanMsg = msg.replace('⚠️', '').trim()} else if (msg.includes('🎯') || msg.includes('📝') || msg.includes('✨')) {logType = 'info'; logIcon = 'ℹ️'; cleanMsg = msg.replace(/[🎯📝✨]/g, '').trim()} const entry = document.createElement('div'); entry.className = `log-item ${logType}`; entry.innerHTML = ` <span class="log-time">${new Date().toLocaleTimeString()}</span><span class="log-text">${logIcon} ${cleanMsg}</span> `; logList.appendChild(entry); if (logList.children.length > LOG_BUFFER_SIZE) {for (let i = 0; i < Math.floor(LOG_BUFFER_SIZE / 2); i++) {logList.removeChild(logList.children[i])}} if (logCount) {logCount.textContent = `${logList.children.length} 条`} logList.scrollTop = logList.scrollHeight; console.log(`[TraeCN] ${msg}`)} function addCommand() {const input = document.getElementById('trae-command-input'); const command = input.value.trim(); if (!command) {log('❌ 命令不能为空'); return} const existingCommand = commands.find(cmd => cmd.text === command && cmd.status === 'pending'); if (existingCommand) {log('⚠️ 命令已存在，无需重复添加'); return} commands.push({id: Date.now(), text: command, status: 'pending'}); input.value = ''; updateCommandList(); log(`✅ 已发送命令: ${command}`)} function removeCommand(id) {const index = commands.findIndex(cmd => cmd.id === id); if (index !== -1) {const command = commands[index]; commands.splice(index, 1); updateCommandList(); log(`🗑️ 已删除命令: ${command.text}`)}} function updateCommandList() {const listContainer = document.getElementById('trae-command-items'); const countContainer = document.getElementById('trae-command-count'); if (!listContainer || !countContainer) return; listContainer.innerHTML = ''; const pendingCount = commands.filter(cmd => cmd.status === 'pending').length; countContainer.textContent = `${commands.length} 个命令`; commands.forEach((command) => {const commandItem = document.createElement('div'); const isPending = command.status === 'pending'; commandItem.className = `command-item ${command.status === 'completed' ? 'completed' : ''}`; commandItem.dataset.commandId = command.id; const statusIcon = command.status === 'completed' ? '✅' : command.status === 'executing' ? '⏳' : '→'; commandItem.innerHTML = ` <span class="drag-handle" style="display: ${isPending ? 'flex' : 'none'};" data-command-id="${command.id}" title="拖拽排序" draggable="${isPending}">⋮⋮</span><span class="command-status">${statusIcon}</span><span class="command-text">${command.text}</span><span class="command-delete" onclick="removeCommand(${command.id})" title="删除">×</span> `; if (isPending) {const dragHandle = commandItem.querySelector('.drag-handle'); if (dragHandle) {dragHandle.addEventListener('dragstart', (e) => handleCommandDragStart(e, command.id)); dragHandle.addEventListener('dragend', handleCommandDragEnd)} commandItem.addEventListener('dragover', handleCommandDragOver); commandItem.addEventListener('dragleave', handleCommandDragLeave); commandItem.addEventListener('drop', (e) => handleCommandDrop(e, command.id))} listContainer.appendChild(commandItem)}); updateMinimizedTitle(); applyTheme()} function checkChatInputStatus() {try {const chatInput = document.querySelector('.chat-input-v2-input-box-editable'); const sendButton = document.querySelector('.chat-input-v2-send-button'); if (!chatInput || !sendButton) {log('❌ 未找到chat-input组件'); return 'not_found'} const isRunning = sendButton.querySelector('.codicon-stop-circle'); const isDisabled = sendButton.disabled; const hasArrowUp = sendButton.querySelector('.codicon-icube-ArrowUp'); let status = ''; let details = []; if (isRunning) {status = 'running'; details.push('运行中')} else if (isDisabled) {status = 'ready'; details.push('等待输入')} else if (hasArrowUp) {status = 'ready'; details.push('准备发送')} else {status = 'waiting'; details.push('等待状态')} const hasContent = chatInput.textContent.trim().length > 0; if (hasContent) {details.push('有内容')} const optimizeBtn = document.querySelector('.chat-input-v2-prompt-optimize-button'); if (optimizeBtn && !optimizeBtn.disabled) {details.push('优化可用')} log(`📊 Chat-Input状态: ${status} (${details.join(', ')})`); return status} catch (error) {log(`❌ 检测状态失败: ${error.message}`); return 'error'}} function inputCommandToChat(command) {try {const chatInput = document.querySelector('.chat-input-v2-input-box-editable'); if (!chatInput) {log('❌ 未找到chat-input输入框'); return false} const sendButton = document.querySelector('.chat-input-v2-send-button'); if (!sendButton) {log('❌ 未找到发送按钮'); return false} const isRunning = sendButton.querySelector('.codicon-stop-circle'); if (isRunning) {log('⚠️ Trae正在运行，等待输入状态'); return false} log(`📝 正在输入命令: ${command}`); chatInput.focus(); chatInput.innerHTML = ''; const paragraph = document.createElement('p'); paragraph.className = 'chat-input-v2__paragraph'; paragraph.setAttribute('dir', 'ltr'); const lines = command.split('\n'); lines.forEach((line, index) => {if (index > 0) {const br = document.createElement('br'); paragraph.appendChild(br)} const textNode = document.createTextNode(line); paragraph.appendChild(textNode)}); chatInput.appendChild(paragraph); chatInput.setAttribute('data-text-content', command); paragraph.setAttribute('data-text-content', command); const events = ['focus', 'input', 'change', 'keyup', 'keydown', 'DOMSubtreeModified', 'compositionend']; events.forEach(eventType => {try {const event = new Event(eventType, {bubbles: true, cancelable: true, view: window}); chatInput.dispatchEvent(event)} catch (e) {}}); try {const inputEvent = new InputEvent('input', {bubbles: true, cancelable: true, data: command, inputType: 'insertText'}); chatInput.dispatchEvent(inputEvent)} catch (e) {log(`InputEvent触发失败: ${e.message}`)} try {const lexicalEvent = new Event('lexical-update', {bubbles: true, cancelable: true}); chatInput.dispatchEvent(lexicalEvent)} catch (e) {} log('✅ 命令已插入，等待界面响应...'); setTimeout(() => {checkAndSendCommand(sendButton, command)}, 1000); return true} catch (error) {log(`❌ 输入命令失败: ${error.message}`); return false}} function checkAndSendCommand(sendButton, command) {try {const isRunning = sendButton.querySelector('.codicon-stop-circle'); const isDisabled = sendButton.disabled; const hasArrowUp = sendButton.querySelector('.codicon-icube-ArrowUp'); log(`📊 发送前状态: running=${!!isRunning}, disabled=${isDisabled}, hasArrowUp=${!!hasArrowUp}`); const chatInput = document.querySelector('.chat-input-v2-input-box-editable'); const paragraph = chatInput.querySelector('p.chat-input-v2__paragraph'); const textContent = paragraph ? paragraph.textContent.trim() : ''; const hasContent = chatInput && textContent.length > 0; if (!hasContent) {log('❌ 输入框为空，无法发送'); return false} if (!isRunning && !isDisabled) {sendButton.click(); log('📤 命令已发送'); return true} else if (isRunning) {log('⚠️ Trae正在运行，等待发送时机'); setTimeout(() => {checkAndSendCommand(sendButton, command)}, 5000)} else if (isDisabled) {log('⚠️ 按钮被禁用，等待可用状态'); setTimeout(() => {checkAndSendCommand(sendButton, command)}, 3000)} return false} catch (error) {log(`❌ 发送命令失败: ${error.message}`); return false}} function isButtonVisible(button) {try {const rect = button.getBoundingClientRect(); return rect.width > 0 && rect.height > 0 && window.getComputedStyle(button).display !== 'none' && window.getComputedStyle(button).visibility !== 'hidden'} catch (error) {return false}} const BUTTON_CONFIGS = [ {name: '继续', selector: 'div.agent-error-wrap div.icube-alert-action', validate: (b) => b.textContent.trim() === '继续'}, {name: '运行', selector: 'div.icd-run-command-card-v2-actions button.icd-run-command-card-v2-actions-btn-run', validate: (b) => b.textContent.trim() === '运行'}, {name: '全部接受', selector: 'div.chat-todolist-bar button.icd-btn-primary', validate: (b) => {const span = b.querySelector('span.icd-btn-content'); return (span ? span.textContent.trim() : '') === '全部接受'}}, {name: '删除', selector: 'button.icd-delete-files-command-card-v2-actions-delete', validate: (b) => {const span = b.querySelector('span.icd-btn-content'); return (span ? span.textContent.trim() : '') === '删除' && enableDelete}} ]; function findButton(config) {try {const button = document.querySelector(config.selector); return button && isButtonVisible(button) && config.validate(button) ? button : null} catch (error) {log(`❌ 查找${config.name}按钮错误: ${error.message}`); return null}} function clickButton(button, buttonName) {try {const rect = button.getBoundingClientRect(); const event = new MouseEvent('click', {view: window, bubbles: true, cancelable: true, clientX: rect.left + rect.width / 2, clientY: rect.top + rect.height / 2}); button.dispatchEvent(event); clickCount++; updateMinimizedTitle(); const logMessage = buttonName === '删除' ? `✅ 成功点击<span style="color: #e74c3c; font-weight: bold;">"${buttonName}"</span>按钮 (${clickCount}/${clickLimit})` : `✅ 成功点击"${buttonName}"按钮 (${clickCount}/${clickLimit})`; log(logMessage); showClickAnimation(); return checkClickLimitAfterClick()} catch (error) {log(`❌ 点击${buttonName}按钮错误: ${error.message}`); return false}} function findAndClick() {try {for (const config of BUTTON_CONFIGS) {const button = findButton(config); if (button) {return clickButton(button, config.name)}} const executingCommand = commands.find(cmd => cmd.status === 'executing'); if (executingCommand) {return false} const pendingCommands = commands.filter(cmd => cmd.status === 'pending'); if (pendingCommands.length > 0) {return processNextCommandInQueue()} return false} catch (error) {log(`❌ 错误: ${error.message}`); return false}} function setElStyle(id, style) {const el = document.getElementById(id); if (el) {if (style.includes(':')) {el.style.cssText = style} else {el.style.color = style}}} function checkClickLimitAfterClick() {if (clickLimit > 0 && clickCount >= clickLimit) {setTimeout(() => {clickCount = 0; updateMinimizedTitle(); stop(true)}, 100); return true} return false} function updateClickLimit(value) {const numValue = parseInt(value); if (isNaN(numValue) || numValue < 0) {clickLimit = 0} else if (numValue > 99) {clickLimit = 99} else {clickLimit = numValue} const limitInput = document.getElementById('trae-click-limit'); if (limitInput) limitInput.value = clickLimit; updateMinimizedTitle(); log(`📊 点击次数限制已设置为: ${clickLimit === 0 ? '无限制' : clickLimit}`)} function resetClickCount() {clickCount = 0; updateMinimizedTitle(); log('🔄 点击次数已重置')} function toggle() {isRunning ? stop() : start()} function start() {if (isRunning) return; isRunning = true; applyTheme(); log('🚀 启动自动操作 (支持继续、运行、接受按钮' + (enableDelete ? '、<span style="color: #e74c3c; font-weight: bold;">删除按钮</span>' : '') + ')'); interval = setInterval(findAndClick, 5000); findAndClick(); setTimeout(() => {if (controls && controls.style.display !== 'none') {minimize(); log('📱 自动收起控制面板')}}, 3000)} function stop(isLimitReached = false) {if (!isRunning) return; if (interval) clearInterval(interval); isRunning = false; applyTheme(); if (isLimitReached) {log('⚠️ 已达到点击次数限制，自动停止操作')} else {log('⏹️ 停止自动操作')} const controls = document.getElementById('trae-controls'); if (controls && controls.style.display === 'none') {minimize(); log('📱 自动展开控制面板')}} function updateMinimizeButton(isMinimized) {const minimizeBtn = document.getElementById('trae-minimize'); const minimizeBtnMinimized = document.getElementById('trae-minimize-minimized'); if (minimizeBtn) {minimizeBtn.textContent = isMinimized ? '+' : '－'; minimizeBtn.title = isMinimized ? '展开' : '收起'} if (minimizeBtnMinimized) {minimizeBtnMinimized.textContent = isMinimized ? '+' : '－'; minimizeBtnMinimized.title = isMinimized ? '展开' : '收起'}} function processNextCommandInQueue() {try {const pendingCommands = commands.filter(cmd => cmd.status === 'pending'); if (pendingCommands.length === 0) {return false} const nextCommand = pendingCommands[0]; const commandIndex = commands.findIndex(cmd => cmd.id === nextCommand.id); const sendButton = document.querySelector('.chat-input-v2-send-button'); if (!sendButton) {log('❌ 未找到发送按钮'); return false} const isRunning = sendButton.querySelector('.codicon-stop-circle'); if (isRunning) {log('⚠️ Trae正在运行，跳过命令执行'); return false} commands[commandIndex].status = 'executing'; updateCommandList(); const success = inputCommandToChat(nextCommand.text); if (success) {commands[commandIndex].status = 'completed'; clickCount++; updateMinimizedTitle(); log(`✅ 命令执行完成: ${nextCommand.text} (${clickCount}/${clickLimit === 0 ? '∞' : clickLimit})`); if (clickLimit > 0 && clickCount >= clickLimit) {stop(true)}} else {commands[commandIndex].status = 'pending'; log(`❌ 命令执行失败: ${nextCommand.text}`)} updateCommandList(); return success} catch (error) {log(`❌ 处理命令队列失败: ${error.message}`); return false}} function updateMinimizedTitle() {const title = document.getElementById('trae-title'); const minimizedTitle = document.getElementById('trae-minimized-title'); const queueStatus = document.getElementById('trae-queue-status'); const clickLimitDisplay = clickLimit === 0 ? '∞' : clickLimit; const pendingCommands = commands.filter(cmd => cmd.status === 'pending').length; const completedCommands = commands.filter(cmd => cmd.status === 'completed').length; const totalCommands = commands.length; let commandInfo = ''; if (totalCommands > 0) {commandInfo = ` (${completedCommands}/${totalCommands})`} const titleContent = `Auto <span class="trae-count-wrapper">${clickCount}</span>/${clickLimitDisplay}${commandInfo} <span class="trae-plus-placeholder"></span>`; if (title) title.innerHTML = titleContent; if (minimizedTitle) minimizedTitle.innerHTML = titleContent; if (queueStatus) {if (totalCommands > 0) {queueStatus.style.display = 'block'; let queueText = `队列：`; if (pendingCommands > 0) {queueText += `${pendingCommands} 个待执行`} else if (completedCommands > 0) {queueText += `${completedCommands} 个已提交`} queueStatus.textContent = queueText} else {queueStatus.style.display = 'none'}}} function showClickAnimation(isSimulated = false) {if (isSimulated) {clickCount++; updateMinimizedTitle(); log(`✅ 模拟点击成功 (${clickCount}/${clickLimit})`); if (checkClickLimitAfterClick()) {log('⚠️ 模拟点击达到限制，自动停止操作')}} const minimizedTitle = document.getElementById('trae-minimized-title'); const title = document.getElementById('trae-title'); if (!minimizedTitle && !title) return; const activeTitle = minimizedTitle?.style.display !== 'none' ? minimizedTitle : title; if (!activeTitle) return; let countWrapper = activeTitle.querySelector('.trae-count-wrapper'); if (!countWrapper) {const text = activeTitle.textContent; const match = text.match(/Auto\s+(\d+)\/(.+?)(?:\s|$)/); if (match) {activeTitle.innerHTML = `Auto <span class="trae-count-wrapper">${match[1]}</span>/${match[2]} <span class="trae-plus-placeholder"></span>`; countWrapper = activeTitle.querySelector('.trae-count-wrapper')} else {return}} if (!countWrapper) return; if (!document.getElementById('trae-animation-styles')) {const style = document.createElement('style'); style.id = 'trae-animation-styles'; style.textContent = ` @keyframes fadeUp {0% {opacity: 0; transform: translateY(0)} 30% {opacity: 1; transform: translateY(-5px)} 100% {opacity: 0; transform: translateY(-30px)}} .trae-count-wrapper {position: relative; display: inline-block} `; document.head.appendChild(style)} const plusOne = document.createElement('span'); plusOne.textContent = '+1'; plusOne.style.cssText = ` position: absolute; left: -2px; top: 10px; color: ${isDarkMode ? '#2ecc71' : '#27ae60'}; background: ${isDarkMode ? 'rgba(44, 62, 80, 0.6)' : 'rgba(255, 255, 255, 0.6)'}; padding: 2px 4px; border-radius: 3px; font-weight: bold; font-size: 12px; animation: fadeUp 1s ease-out forwards; z-index: 1000; `; countWrapper.appendChild(plusOne); setTimeout(() => {if (plusOne && plusOne.parentNode) {plusOne.remove()}}, 1000)} function minimize() {const controls = document.getElementById('trae-controls'); const panel = document.getElementById('trae-panel'); const header = document.getElementById('trae-header'); const minimizedContent = document.getElementById('trae-minimized-content'); const title = document.getElementById('trae-title'); const minimizedTitle = document.getElementById('trae-minimized-title'); if (!controls || !panel || !header || !minimizedContent) return; if (controls.style.display === 'none') {controls.style.display = 'block'; header.style.display = 'flex'; minimizedContent.style.display = 'none'; panel.style.padding = ''; panel.style.removeProperty('min-width'); panel.style.removeProperty('width'); panel.style.removeProperty('max-width'); title.style.display = 'block'; minimizedTitle.style.display = 'none'; panel.style.removeProperty('display'); panel.style.removeProperty('align-items'); panel.style.removeProperty('justify-content'); updateMinimizeButton(false); applyTheme(); applyPanelSize(); updateSizeControls()} else {controls.style.display = 'none'; header.style.display = 'none'; minimizedContent.style.display = 'flex'; panel.style.padding = '8px 12px'; panel.style.minWidth = 'auto'; panel.style.width = 'auto'; panel.style.maxWidth = 'auto'; title.style.display = 'none'; minimizedTitle.style.display = 'block'; panel.style.display = 'flex'; panel.style.alignItems = 'center'; panel.style.justifyContent = 'center'; updateMinimizeButton(true); applyTheme()}} function destroy() {if (!confirm('确定要退出 TraeCN 自动操作吗？')) return; stop(); const panel = document.getElementById('trae-panel'); if (panel) panel.remove(); document.querySelectorAll('[id^="trae-"]').forEach(el => el.remove()); delete window.traeAutoAccept; console.log('🔚 TraeCN 自动操作已完全退出')} function applyPanelSize() {const panel = document.getElementById('trae-panel'); if (!panel) return; const size = PANEL_SIZES[panelSizeIndex] || PANEL_SIZES[0]; panel.style.width = `${size.width}px`; panel.style.setProperty('--log-list-max-height', `${size.logMax}px`); panel.style.setProperty('--command-list-max-height', `${size.commandMax}px`)} function updateSizeControls() {const enlargeBtn = document.getElementById('trae-size-increase'); const shrinkBtn = document.getElementById('trae-size-decrease'); if (!enlargeBtn || !shrinkBtn) return; enlargeBtn.disabled = panelSizeIndex >= PANEL_SIZES.length - 1; shrinkBtn.disabled = panelSizeIndex <= 0} function increasePanelSize() {if (panelSizeIndex < PANEL_SIZES.length - 1) {panelSizeIndex += 1; applyPanelSize(); updateSizeControls(); log(`🔍 面板放大至 ${PANEL_SIZES[panelSizeIndex].width}px`)} else {log('⚠️ 已达到最大面板尺寸')}} function decreasePanelSize() {if (panelSizeIndex > 0) {panelSizeIndex -= 1; applyPanelSize(); updateSizeControls(); log(`🔍 面板缩小至 ${PANEL_SIZES[panelSizeIndex].width}px`)} else {log('⚠️ 已达到最小面板尺寸')}} function createPanel() {if (document.getElementById('trae-panel')) {console.log('控制面板已存在'); return} const panel = document.createElement('div'); panel.id = 'trae-panel'; panel.innerHTML = ` <div id="trae-minimized-content" style="display: none; justify-content: space-between; align-items: center; width: 100%;"><div style="display: flex; align-items: center; flex: 1;"><div id="trae-status-icon-minimized" style="width: 16px; height: 16px; border-radius: 50%; margin-right: 8px;"></div><div style="display: flex; flex-direction: column; align-items: flex-start;"><div id="trae-minimized-title" style="font-weight: bold; user-select: none; font-size: 12px;">Auto 0/∞<span class="trae-plus-placeholder"></span></div><div id="trae-queue-status" style="font-size: 10px; color: #666; display: none;">队列: 0 个命令</div></div></div><button id="trae-minimize-minimized" title="收起" style="margin-left: 8px;">－</button></div><div id="trae-header"><div class="trae-header-left"><div id="trae-status-icon" style="width: 16px; height: 16px; border-radius: 50%; margin-right: 8px;"></div><div id="trae-title" style="font-weight: bold; user-select: none;">Auto 0/∞<span class="trae-plus-placeholder"></span></div></div><div id="trae-header-actions"><button id="trae-size-decrease" class="trae-header-button" title="缩小面板">A-</button><button id="trae-size-increase" class="trae-header-button" title="放大面板">A+</button><button id="trae-minimize" class="trae-header-button" title="收起">－</button></div></div><div id="trae-controls"><!-- 功能入口和配置区域 --><div style="display: flex; justify-content: center; align-items: center; gap: 30px;"><!-- 功能入口按钮组 --><div style="display: flex; gap: 8px;"><button id="trae-toggle" style="background: transparent; color: var(--text-primary); padding: 10px 16px; margin: 2px; border-radius: 8px; cursor: pointer; font-weight: 600; border: none; transition: all 0.2s ease;">启动</button><button id="trae-theme" style="background: transparent; color: var(--text-primary); padding: 10px 16px; margin: 2px; border-radius: 8px; cursor: pointer; font-weight: 600; border: 1px solid var(--border-color); transition: all 0.2s ease;">主题</button><button id="trae-exit" style="background: transparent; color: var(--warning); padding: 10px 16px; margin: 2px; border-radius: 8px; cursor: pointer; font-weight: 600; border: 1px solid var(--warning); transition: all 0.2s ease;">退出</button></div><!-- 配置选项区域 --><div style="display: flex; flex-direction: column; gap: 6px;"><!-- 自动删除配置 --><div style="display: flex; align-items: center; gap: 4px;"><span>自动删除</span><input type="checkbox" id="trae-enable-delete"></div><!-- 限额配置 --><div style="display: flex; align-items: center; gap: 4px;"><span>限额</span><input type="number" id="trae-click-limit" min="0" max="99" value="5"></div></div></div><!-- 命令输入区域 - 始终可见 --><div id="trae-command-input-area"><textarea id="trae-command-input" placeholder="输入命令... 按 Ctrl+Enter 或 Cmd+Enter 提交" onkeydown="if((event.key==='Enter' && (event.ctrlKey || event.metaKey)) || (event.key==='Enter' && event.altKey)){event.preventDefault();addCommand()} else if(event.key==='Enter'){event.stopPropagation()}"></textarea><button id="trae-add-command" disabled>发送</button></div><!-- 抽屉式操作日志 --><div id="trae-log-drawer"><div id="trae-log-toggle"><div><span id="trae-log-arrow">▶</span><span>操作日志</span></div><span id="trae-log-count">0 条</span></div><div id="trae-log-content"><div id="trae-log-list"></div></div></div><!-- 抽屉式命令列表区域 --><div id="trae-command-drawer"><!-- 命令列表头部 --><div id="trae-command-toggle"><div><span id="trae-command-arrow">▶</span><span>命令列表</span></div><span id="trae-command-count">0 个命令</span></div><!-- 命令列表内容区域 --><div id="trae-command-content" style="display: none;"><div id="trae-command-list" style="max-height: var(--command-list-max-height, 200px); overflow-y: auto; background: var(--bg-primary); border-top: 1px solid var(--border-color);" data-theme-bg="white" data-theme-border="#e0e0e0"><div id="trae-command-items" style="padding: 12px 16px;"></div></div></div></div></div> `; document.body.appendChild(panel); updateMinimizedTitle(); const sizeIncreaseBtn = document.getElementById('trae-size-increase'); const sizeDecreaseBtn = document.getElementById('trae-size-decrease'); if (sizeIncreaseBtn) {sizeIncreaseBtn.addEventListener('click', () => {increasePanelSize()})} if (sizeDecreaseBtn) {sizeDecreaseBtn.addEventListener('click', () => {decreasePanelSize()})} applyPanelSize(); updateSizeControls(); const style = document.createElement('style'); style.textContent = ` :root {--bg-primary: #ffffff; --bg-secondary: #f8f9fa; --bg-tertiary: #f5f5f5; --text-primary: #333333; --text-secondary: #666666; --text-tertiary: #8c8c8c; --border-color: #e0e0e0; --border-light: #ddd; --shadow: 0 4px 6px rgba(0,0,0,0.1); --success: #27ae60; --warning: #e74c3c; --info: #4096ff; --panel-bg: #ffffff; --panel-border: 1px solid #e0e0e0; --input-bg: #fafafa; --input-border: #e0e0e0; --button-bg: transparent; --button-border: 1px solid #ddd; --log-bg: #fafafa; --log-border: #e0e0e0; --command-bg: #f5f7fa; --command-border: #e0e0e0} #trae-panel {position: fixed; top: 20px; right: 20px; background: var(--panel-bg); color: var(--text-primary); padding: 20px; border-radius: 12px; box-shadow: var(--shadow); border: var(--panel-border); z-index: 999999; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; min-width: 340px; max-width: 70vw; width: 420px; transition: all 0.3s ease; display: flex; flex-direction: column; gap: 12px; backdrop-filter: blur(10px); max-height: 85vh; overflow: hidden} #trae-panel.trae-panel-dragging {cursor: grabbing} #trae-panel * {box-sizing: border-box} #trae-header {display: flex; justify-content: space-between; align-items: center; gap: 12px; margin-bottom: 6px; cursor: grab; user-select: none} #trae-header:active {cursor: grabbing} .trae-header-left {display: flex; align-items: center} #trae-header-actions {display: flex; align-items: center; gap: 6px} .trae-header-button {background: transparent; border: 1px solid var(--border-color); color: var(--text-primary); padding: 4px 6px; border-radius: 6px; cursor: pointer; font-size: 10px; font-weight: 600; transition: background-color 0.2s ease, color 0.2s ease} .trae-header-button:hover:not(:disabled) {background: var(--bg-tertiary); color: var(--info)} .trae-header-button:disabled {opacity: 0.4; cursor: not-allowed} #trae-minimize, #trae-minimize-minimized {display: flex; align-items: center; justify-content: center} #trae-minimize {min-width: 32px; min-height: 24px} #trae-minimize-minimized {background: transparent; border: 1px solid var(--border-color); border-radius: 6px; padding: 4px 6px; cursor: pointer; transition: background-color 0.2s ease, color 0.2s ease} #trae-minimize-minimized:hover {background: var(--bg-tertiary); color: var(--info)} #trae-toggle, #trae-theme, #trae-exit {background: transparent; border: none; color: var(--text-primary); padding: 10px 16px; margin: 2px; border-radius: 8px; cursor: pointer; font-weight: 600; transition: all 0.2s ease} #trae-theme {border: 1px solid var(--border-color)} #trae-exit {border: 1px solid var(--warning); color: var(--warning)} #trae-status-icon {width: 16px; height: 16px; border-radius: 50%; margin-right: 8px} #trae-title {font-weight: bold; user-select: none} #trae-controls {display: flex; flex-direction: column; gap: 15px} #trae-controls > div:first-child {display: flex; justify-content: center; align-items: center; gap: 30px} #trae-controls > div > div:last-child {display: flex; flex-direction: column; gap: 6px} #trae-controls > div > div:last-child > div {display: flex; align-items: center; gap: 4px} #trae-controls span {font-size: 10px; color: var(--text-tertiary)} #trae-enable-delete {width: 11px; height: 11px; margin: 0; accent-color: var(--info)} #trae-click-limit {width: 45px; padding: 2px 4px; border-radius: 2px; font-size: 11px; border: 1px solid var(--input-border); outline: none; text-align: center; background: var(--input-bg); color: var(--text-primary); -moz-appearance: textfield; appearance: textfield} #trae-click-limit::-webkit-outer-spin-button, #trae-click-limit::-webkit-inner-spin-button {-webkit-appearance: none; margin: 0} #trae-log-drawer, #trae-command-drawer {border-radius: 8px; border: 1px solid var(--border-color); overflow: hidden; background: var(--bg-secondary)} #trae-log-toggle, #trae-command-toggle {display: flex; justify-content: space-between; align-items: center; padding: 10px 12px; cursor: pointer; transition: background-color 0.2s ease; user-select: none; background: var(--bg-primary); color: var(--text-primary)} #trae-log-toggle:hover, #trae-command-toggle:hover {background-color: var(--bg-tertiary)} #trae-log-content, #trae-command-content {display: none; border-top: 1px solid var(--border-color); background: var(--bg-primary)} #trae-log-content {max-height: var(--log-list-max-height, 150px); overflow-y: auto} #trae-log-list {display: flex; flex-direction: column; align-items: flex-start; width: 100%; padding: 8px; font-size: 11px; font-family: 'Monaco', 'Menlo', monospace} .log-item {display: flex; text-align: left !important; align-items: flex-start !important; justify-content: flex-start !important; width: 100%; gap: 6px; border-radius: 3px; font-size: 11px; direction: ltr} .log-item.success {color: var(--success)} .log-item.warning {color: var(--warning)} .log-item.info {color: var(--text-tertiary)} .log-item .log-time {color: var(--text-tertiary); font-size: 10px; white-space: nowrap; min-width: 50px} .log-item .log-text {flex: 1; line-height: 1.4; text-align: left !important; align-self: flex-start; word-break: break-word} #trae-command-input-area {border-radius: 8px; border: 1px solid var(--border-color); background: var(--bg-primary); overflow: hidden; padding: 12px 16px; display: flex; gap: 8px; align-items: stretch} #trae-command-input-area > textarea {flex: 1; min-width: 0} #trae-command-input {height: 60px; padding: 12px; border-radius: 6px; font-size: 13px; border: 2px solid var(--input-border); outline: none; transition: border-color 0.2s ease; background: var(--input-bg); color: var(--text-primary); resize: none; font-family: inherit; line-height: 1.4; overflow: hidden; box-sizing: border-box} #trae-command-input:focus {border-color: var(--info); background: var(--input-bg); box-shadow: 0 0 0 3px rgba(64, 150, 255, 0.1)} #trae-add-command {background: var(--info); color: white; padding: 8px 12px; border-radius: 4px; cursor: pointer; font-weight: 600; border: none; box-shadow: 0 2px 8px rgba(64, 150, 255, 0.3); transition: all 0.2s ease; font-size: 12px; min-width: 40px; height: 60px; display: flex; align-items: center; justify-content: center; flex-shrink: 0} #trae-add-command:hover {background: #3a8ee6; transform: scale(0.95)} #trae-add-command:active {transform: scale(0.9)} #trae-add-command:disabled {background: #c0c4cc; cursor: not-allowed; box-shadow: none} #trae-command-list {max-height: var(--command-list-max-height, 200px); overflow-y: auto; background: var(--bg-primary); border-top: 1px solid var(--border-color)} #trae-command-items {padding: 12px 16px} .command-item {background: var(--command-bg); border: 1px solid var(--command-border); border-radius: 6px; padding: 10px 12px; margin-bottom: 6px; transition: background-color 0.2s ease, border-color 0.2s ease; display: grid; grid-template-columns: auto auto 1fr auto; align-items: flex-start; gap: 8px} .command-item:hover {background: var(--bg-tertiary)} .command-item.completed {opacity: 0.6} .command-item.completed .command-text {color: var(--text-tertiary); text-decoration: line-through} .command-item.dragging {opacity: 0.5} .command-item.drag-over {border: 2px dashed var(--info); background: rgba(64, 150, 255, 0.08)} .command-item .drag-handle {display: flex; align-items: center; justify-content: center; color: var(--text-tertiary); cursor: grab; font-size: 12px; user-select: none; -webkit-user-select: none; padding: 2px; border-radius: 4px} .command-item .drag-handle:hover {background: rgba(64, 150, 255, 0.1); color: var(--info)} .command-item .drag-handle:active {cursor: grabbing} .command-item .command-status {font-size: 12px; color: var(--text-secondary)} .command-item .command-text {font-size: 12px; word-break: break-word; cursor: text; user-select: text; -webkit-user-select: text; -moz-user-select: text; -ms-user-select: text; line-height: 1.5} .command-item .command-delete {color: var(--warning); cursor: pointer; font-size: 14px; padding: 2px 6px; border-radius: 4px; align-self: center} .command-item .command-delete:hover {background: rgba(231, 76, 60, 0.12)} #trae-minimized-content {display: none; justify-content: space-between; align-items: center; width: 100%} #trae-minimized-title {font-weight: bold; user-select: none; font-size: 12px} #trae-queue-status {font-size: 10px; color: var(--text-tertiary)} #trae-status-icon-minimized {width: 16px; height: 16px; border-radius: 50%; margin-right: 8px} @keyframes fadeUp {0% {opacity: 0; transform: translateY(0)} 30% {opacity: 1; transform: translateY(-5px)} 100% {opacity: 0; transform: translateY(-30px)}} #trae-panel ::-webkit-scrollbar {width: 6px} #trae-panel ::-webkit-scrollbar-track {background: var(--bg-secondary); border-radius: 3px} #trae-panel ::-webkit-scrollbar-thumb {background: var(--border-color); border-radius: 3px; opacity: 0.6} #trae-panel ::-webkit-scrollbar-thumb:hover {background: var(--info); opacity: 1} .dragging {opacity: 0.5} .drag-over {border: 2px dashed var(--info) !important; background: rgba(64, 150, 255, 0.1) !important} #trae-panel #trae-log-content::-webkit-scrollbar-track, #trae-panel #trae-command-list::-webkit-scrollbar-track {background: var(--bg-secondary); border-radius: 3px} #trae-panel #trae-log-content::-webkit-scrollbar-thumb, #trae-panel #trae-command-list::-webkit-scrollbar-thumb {background: var(--border-color); border-radius: 3px; opacity: 0.6} #trae-panel #trae-log-content::-webkit-scrollbar-thumb:hover, #trae-panel #trae-command-list::-webkit-scrollbar-thumb:hover {background: var(--info); opacity: 1} #trae-panel #trae-add-command:hover:not(:disabled) {background: #3a8ee6; transform: scale(0.95)} #trae-panel #trae-add-command:active:not(:disabled) {transform: scale(0.9)} #trae-panel #trae-add-command:not(:disabled) {background: #4096ff; cursor: pointer; box-shadow: 0 2px 8px rgba(64, 150, 255, 0.3)} #trae-panel #trae-add-command:disabled {background: #c0c4cc; cursor: not-allowed; box-shadow: none} #trae-panel #trae-command-input:focus {outline: none; border-color: var(--info); background: var(--input-bg); box-shadow: 0 0 0 3px rgba(64, 150, 255, 0.1)} #trae-panel #trae-command-input {resize: none !important; min-height: 60px !important; max-height: 60px !important; height: 60px !important} `; document.head.appendChild(style); const minimizeBtn = document.getElementById('trae-minimize'); const minimizeBtnMinimized = document.getElementById('trae-minimize-minimized'); const toggleBtn = document.getElementById('trae-toggle'); const exitBtn = document.getElementById('trae-exit'); const themeBtn = document.getElementById('trae-theme'); const limitInput = document.getElementById('trae-click-limit'); const deleteCheckbox = document.getElementById('trae-enable-delete'); const commandInput = document.getElementById('trae-command-input'); const addCommandBtn = document.getElementById('trae-add-command'); const logToggle = document.getElementById('trae-log-toggle'); const logContent = document.getElementById('trae-log-content'); const logArrow = document.getElementById('trae-log-arrow'); const commandToggle = document.getElementById('trae-command-toggle'); const commandContent = document.getElementById('trae-command-content'); const commandArrow = document.getElementById('trae-command-arrow'); const panelHeader = document.getElementById('trae-header'); let logCollapseTimer = null; let isLogExpanded = false; let isCommandExpanded = false; function collapseLog() {if (isLogExpanded) {logContent.style.display = 'none'; logArrow.textContent = '▶'; isLogExpanded = false}} function expandLog() {if (!isLogExpanded) {logContent.style.display = 'block'; logArrow.textContent = '▼'; isLogExpanded = true; if (logCollapseTimer) {clearTimeout(logCollapseTimer)} logCollapseTimer = setTimeout(() => {collapseLog()}, 5000)}} function collapseCommand() {if (isCommandExpanded) {commandContent.style.display = 'none'; commandArrow.textContent = '▶'; isCommandExpanded = false}} function expandCommand() {if (!isCommandExpanded) {commandContent.style.display = 'block'; commandArrow.textContent = '▼'; isCommandExpanded = true}} logToggle.addEventListener('click', () => {if (isLogExpanded) {collapseLog(); if (logCollapseTimer) {clearTimeout(logCollapseTimer)}} else {expandLog()}}); commandToggle.addEventListener('click', () => {if (isCommandExpanded) {collapseCommand()} else {expandCommand()}}); document.addEventListener('click', (e) => {if (isLogExpanded && !e.target.closest('#trae-log-drawer')) {collapseLog(); if (logCollapseTimer) {clearTimeout(logCollapseTimer)}}}); if (panelHeader) {panelHeader.addEventListener('click', e => !e.target.closest('button') && minimize())} minimizeBtn.addEventListener('click', e => {e.stopPropagation(); minimize()}); minimizeBtnMinimized.addEventListener('click', e => {e.stopPropagation(); minimize()}); toggleBtn.addEventListener('click', toggle); exitBtn.addEventListener('click', e => {e.stopPropagation(); destroy()}); themeBtn.addEventListener('click', e => {e.stopPropagation(); toggleTheme()}); if (limitInput) {limitInput.addEventListener('input', e => {e.stopPropagation(); updateClickLimit(e.target.value)})} if (deleteCheckbox) {deleteCheckbox.addEventListener('change', e => {e.stopPropagation(); enableDelete = e.target.checked})} if (commandInput) {} if (addCommandBtn) {addCommandBtn.addEventListener('click', e => {e.stopPropagation(); addCommand()})} function updateSendButtonState() {const input = document.getElementById('trae-command-input'); const sendButton = document.getElementById('trae-add-command'); if (input && sendButton) {const hasContent = input.value.trim().length > 0; sendButton.disabled = !hasContent; if (hasContent) {sendButton.style.background = '#4096ff'; sendButton.style.cursor = 'pointer'; sendButton.style.boxShadow = '0 2px 8px rgba(64, 150, 255, 0.3)'} else {sendButton.style.background = '#c0c4cc'; sendButton.style.cursor = 'not-allowed'; sendButton.style.boxShadow = 'none'}}} if (commandInput) {commandInput.addEventListener('input', updateSendButtonState); commandInput.addEventListener('keyup', updateSendButtonState); commandInput.addEventListener('paste', function () {setTimeout(updateSendButtonState, 10)}); commandInput.addEventListener('cut', function () {setTimeout(updateSendButtonState, 10)})} updateSendButtonState(); updateMinimizeButton(false); applyTheme(); updateMinimizedTitle(); if (logContent) {logContent.style.display = 'none'; if (logArrow) logArrow.textContent = '▶'; isLogExpanded = false} if (commandContent) {commandContent.style.display = 'none'; if (commandArrow) commandArrow.textContent = '▶'; isCommandExpanded = false} const beginPanelDrag = (event) => {if (event.target.closest('button') || event.target.closest('#trae-header-actions')) {return} isDragging = true; dragOffset.x = event.clientX - panel.offsetLeft; dragOffset.y = event.clientY - panel.offsetTop; panel.classList.add('trae-panel-dragging')}; const endPanelDrag = () => {if (isDragging) {isDragging = false; panel.classList.remove('trae-panel-dragging')}}; if (panelHeader) {panelHeader.addEventListener('mousedown', beginPanelDrag)} const minimizedContent = document.getElementById('trae-minimized-content'); if (minimizedContent) {minimizedContent.addEventListener('mousedown', (event) => {if (event.target.closest('button')) return; beginPanelDrag(event)})} document.addEventListener('mousemove', e => {if (!isDragging) return; e.preventDefault(); const newLeft = e.clientX - dragOffset.x; const newTop = e.clientY - dragOffset.y; const windowWidth = window.innerWidth; const windowHeight = window.innerHeight; const panelRect = panel.getBoundingClientRect(); const margin = 20; panel.style.left = Math.max(margin, Math.min(newLeft, windowWidth - panelRect.width - margin)) + 'px'; panel.style.top = Math.max(margin, Math.min(newTop, windowHeight - panelRect.height - margin)) + 'px'; panel.style.right = 'auto'}); document.addEventListener('mouseup', endPanelDrag); log('🎯 TraeCN 自动操作脚本已加载'); log(`📝 日志缓冲区: ${LOG_BUFFER_SIZE} 条`); log('✨ 支持功能: 自动点击继续、运行、接受按钮' + (enableDelete ? '、<span style="color: #e74c3c; font-weight: bold;">删除按钮</span>' : ''))} window.addCommand = addCommand; window.removeCommand = removeCommand; window.handleCommandDragStart = function (event, commandId) {isCommandDragging = true; draggedCommand = commands.find(cmd => cmd.id === commandId); event.dataTransfer.effectAllowed = 'move'; const dragContainer = event.currentTarget && event.currentTarget.closest ? event.currentTarget.closest('.command-item') : event.currentTarget; if (dragContainer) {event.dataTransfer.setData('text/html', dragContainer.innerHTML)} else {event.dataTransfer.setData('text/html', '')} event.dataTransfer.setData('commandId', commandId); if (dragContainer && dragContainer.classList) {dragContainer.classList.add('dragging')} event.stopPropagation()}; window.handleCommandDragOver = function (event) {if (event.preventDefault) {event.preventDefault()} const target = event.currentTarget; if (target && target.classList) {target.classList.add('drag-over')} event.dataTransfer.dropEffect = 'move'; return false}; window.handleCommandDragLeave = function (event) {const target = event.currentTarget; if (target && target.classList) {target.classList.remove('drag-over')}}; window.handleCommandDrop = function (event, targetCommandId) {if (event.stopPropagation) {event.stopPropagation()} const targetElement = event.currentTarget; if (targetElement && targetElement.classList) {targetElement.classList.remove('drag-over')} if (isCommandDragging && draggedCommand) {const targetIndex = commands.findIndex(cmd => cmd.id === targetCommandId); const draggedIndex = commands.findIndex(cmd => cmd.id === draggedCommand.id); if (targetIndex !== -1 && draggedIndex !== -1 && targetIndex !== draggedIndex) {if (draggedCommand.status === 'pending') {const targetCommand = commands[targetIndex]; if (targetCommand.status === 'pending') {commands.splice(draggedIndex, 1); commands.splice(targetIndex, 0, draggedCommand); updateCommandList(); const commandText = draggedCommand.text.length > 15 ? draggedCommand.text.substring(0, 15) + '...' : draggedCommand.text; log(`🔄 已拖拽移动命令 "${commandText}"`)}}}} return false}; window.handleCommandDragEnd = function (event) {isCommandDragging = false; const dragContainer = event && event.currentTarget && event.currentTarget.closest ? event.currentTarget.closest('.command-item') : null; if (dragContainer && dragContainer.classList) {dragContainer.classList.remove('dragging'); dragContainer.classList.remove('drag-over')} document.querySelectorAll('.drag-over').forEach(el => el.classList.remove('drag-over')); draggedCommand = null}; window.traeAutoAccept = {start, stop, toggle, click: findAndClick, destroy, exit: destroy, toggleTheme, setTheme: (dark) => {isDarkMode = dark; applyTheme()}, setClickLimit: updateClickLimit, getClickCount: () => clickCount, getClickLimit: () => clickLimit, simulateClickAnimation: () => showClickAnimation(true), addCommand: (command) => {commands.push({id: Date.now(), text: command, status: 'pending'}); updateCommandList(); log(`✅ 已添加命令: ${command}`)}, removeCommand: (id) => removeCommand(id), getCommands: () => commands, clearCommands: () => {commands = []; updateCommandList(); log('🗑️ 已清空所有命令')}}; createPanel(); console.log('🎯 TraeCN 自动操作脚本已加载'); console.log('💡 使用方法:'); console.log(' - traeAutoAccept.toggle() // 启动/停止'); console.log(' - traeAutoAccept.start() // 启动'); console.log(' - traeAutoAccept.stop() // 停止'); console.log(' - traeAutoAccept.toggleTheme() // 切换主题'); console.log(' - traeAutoAccept.destroy() // 退出'); console.log(' - traeAutoAccept.setClickLimit(n) // 设置点击限制 (0=无限制)'); console.log(' - traeAutoAccept.getClickCount() // 获取当前点击次数'); console.log(' - traeAutoAccept.getClickLimit() // 获取点击限制'); console.log(' - traeAutoAccept.simulateClickAnimation() // 模拟+1动画效果'); console.log(''); console.log('💡 命令队列功能:'); console.log(' - traeAutoAccept.addCommand("命令内容") // 添加命令'); console.log(' - traeAutoAccept.removeCommand(id) // 删除命令'); console.log(' - traeAutoAccept.startCommandQueue() // 启动命令队列'); console.log(' - traeAutoAccept.stopCommandQueue() // 停止命令队列'); console.log(' - traeAutoAccept.getCommands() // 获取所有命令'); console.log(' - traeAutoAccept.clearCommands() // 清空所有命令'); console.log('💡 控制台将在10秒后关闭')})();